// 主角信息360行修改
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <graphics.h>
#include <Windows.h>
#include <stdlib.h>
#include <mmsystem.h>
#include <conio.h>
#include <string>
#include <unordered_map>
#pragma comment(lib,"winmm.lib")

using namespace std;

#define WINDOWSWIDTH        830          //游戏窗口宽度
#define WINDOWSHEIGHT       680          //游戏窗口高度
#define INFORMATIONWIDTH    140          //信息框宽度
#define INFORMATIONHEIGHT   660          //信息框高度
#define GAP                 10           //间隙像素
#define SIZE                60           //一张图片的像素
#define STAGE               50            //最高层数
#define NUM                 11           //每行或每列图片的个数

//声明图片变量
IMAGE wall, _floor, _void, ydoor, bdoor, rdoor, sdoor, ykey, bkey, rkey, rstone, bstone, rliquid, bliquid;       //墙,地板,黄门,蓝门,黄钥匙,蓝钥匙,红水晶,蓝水晶,红药水,蓝药水
IMAGE _gslime, _rslime, _bat, _skull, _bskull, primary_wizard, primary_defender, _kskull, big_bat, _Orc, big_slime, senior_wizard, _great_orc, _stoneman, _vampire;  //绿史莱姆,红史莱姆,小蝙蝠,骷髅人,骷髅士兵,法师,大蝙蝠，兽人,大史莱姆，高级法师,兽人武士，
IMAGE primary_sorcerer, senior_sorcerer, king_slime, blood_bat, dark_knight, magic_guard, senior_guard;   // 初级巫师， 高级巫师, 史莱姆王, 吸血蝙蝠, 黑暗骑士， 魔法警卫， 高级卫兵
IMAGE _octopus_ru, _octopus_um, _octopus_lu, _octopus_lm, _octopus_mm, _octopus_rm, _octopus_rd, _octopus_dm, _octopus_ld; //章鱼
IMAGE _dragon_ru, _dragon_um, _dragon_lu, _dragon_lm, _dragon_mm, _dragon_rm, _dragon_rd, _dragon_dm, _dragon_ld;         //魔龙
IMAGE _greatWiz, _princess, _skwarr, _warr, _ghost, medium_defender, _brisword, _knight, _knightleader;
IMAGE roleup, roledown, roleleft, roleright, leader, helper, suffering, store, lstore, rstore;          //角色朝向,同是塔中人,指引者,帮助者,狱友,商店
IMAGE stairsup, stairsdown, cage, ironsword, ironshield, convey, notebook, silvershield, silversword, holy_sword, cross, axe, divine_shield, holy_shield;   //上下楼梯,笼子,剑,盾,传送道具,记事本,银盾   divine_shield 是圣盾 holy_shield神圣盾
IMAGE knight_sword, knight_shield, _bomb, _centred_tp, _lucky_coin, magic_key, _ice_magic, _fly_down, _fly_up, divine_sword,dragon_killer;
IMAGE defend, _boss, _sboss, fire;

TCHAR str[10];
char con;
HWND hwnd;

void Welcome();
void Init();
void Introduction();
void Draw();
void FindRole(int& prow, int& pcol);
void GameUp(int row, int col);
void GameDown(int x, int y);
void GameLeft(int x, int y);
void GameRight(int x, int y);
void queryBook();
void checkNotebook();
void Judge_magic();
void playMusic();
void Eventdead();
void Eventfinal2();
TCHAR* trans(int num);

//0墙 1地板 2暗墙 3隐形墙 4岩浆 5虚空 6黄门 7蓝门 8红门 9铁门 10机关门
//11上楼 12下楼 16-19角色朝向
// 21 22 23 黄蓝红钥匙	24 25红蓝宝石	26 27 红蓝血瓶
// 35 骑士剑 36 骑士盾
// 44 中心对称飞行器 45 炸弹 46冰冻魔法 47 屠龙匕
// 100 小偷 101 商人 102 老头1 103 老头2
// 251绿史莱姆 252红史莱姆 253蝙蝠 254法师 255骷髅人 256骷髅士兵  257初级卫兵  259大史莱姆 260大蝙蝠 261高级法师 262兽人 263兽人武士 264石头人
// 265吸血鬼 266鬼战士 267战士 268幽灵 269中级卫兵 270双手剑士 271骑士 272骑士队长 293~295 魔龙右上上中左上 296~298魔龙右中正中左中 299~301 魔龙右下下中左下

int map[STAGE + 3][NUM + 2][NUM + 2]     //NUM+2是增加多余的墙,防止游戏过程中出现数组越界问题
{
	//第0层
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
		{ 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0 },
		{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 0 },
		{ 0, 1, 3, 3, 3, 3, 3, 3, 3, 1, 3, 1, 0 },
		{ 0, 1, 3, 1, 1, 1, 1, 1, 3, 1, 3, 1, 0 },
		{ 0, 1, 3, 1, 3, 3, 3, 1, 3, 1, 3, 1, 0 },
		{ 0, 1, 3, 1, 3, 11, 47, 1, 3, 1, 3, 1, 0 },
		{ 0, 1, 3, 1, 3, 3, 3, 3, 3, 1, 3, 1, 0 },
		{ 0, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 0 },
		{ 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 0 },
		{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
	},
	//第一层地图	
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 11, 1, 251, 252, 251, 1, 1, 1, 1, 1, 1, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 },
		{ 0, 26, 1, 1, 6, 1, 0, 24, 21, 1, 0, 1, 0 },
		{ 0, 1, 255, 1, 0, 1, 0, 25, 26, 1, 0, 1, 0 },
		{ 0, 0, 6, 0, 0, 1, 0, 0, 0, 6, 0, 1, 0 },
		{ 0, 21, 1, 1, 0, 1, 6, 253, 254, 253, 0, 1, 0 },
		{ 0, 1, 256, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0 },
		{ 0, 0, 6, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0 },
		{ 0, 1, 1, 1, 0, 0, 8, 0, 0, 0, 6, 0, 0 },
		{ 0, 26, 1, 21, 0, 23, 1, 1, 0, 1, 253, 1, 0 },
		{ 0, 26, 41, 21, 0, 1, 17, 1, 0, 251, 27, 251, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
	},
	//第二层地图
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 12, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 17, 1, 0, 0, 1, 269, 1, 269, 1, 0, 0, 0 },
	{ 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
	{ 0, 1, 0, 21, 21, 0, 1, 1, 1, 0, 1, 102, 0 },
	{ 0, 1, 0, 21, 1, 9, 1, 1, 1, 9, 1, 1, 0 },
	{ 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0 },
	{ 0, 1, 0, 96, 1, 0, 1, 1, 1, 0, 1, 131, 0 },
	{ 0, 1, 0, 1, 1, 9, 1, 1, 1, 9, 1, 1, 0 },
	{ 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0 },
	{ 0, 1, 0, 27, 27, 0, 1, 1, 1, 0, 1, 1, 0 },
	{ 0, 11, 0, 27, 1, 9, 1, 1, 1, 9, 1, 1, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
//第三层地图
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 21, 25, 0, 21, 27, 21, 0, 1, 0, 1, 26, 0 },
	{ 0, 1, 26, 0, 27, 21, 27, 0, 1, 6, 253, 1, 0 },
	{ 0, 254, 1, 0, 21, 22, 21, 0, 1, 0, 0, 0, 0 },
	{ 0, 6, 0, 0, 0, 1, 0, 0, 1, 0, 1, 103, 0 },
	{ 0, 1, 1, 253, 1, 1, 1, 251, 1, 1, 1, 1, 0 },
	{ 0, 6, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0 },
	{ 0, 255, 1, 0, 0, 1, 0, 0, 1, 0, 1, 26, 0 },
	{ 0, 1, 21, 0, 1, 1, 1, 0, 1, 6, 254, 21, 0 },
	{ 0, 26, 24, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0 },//8,5
	{ 0, 0, 0, 0, 0, 1, 0, 0, 252, 0, 1, 1, 0 },
	{ 0, 12, 17, 1, 1, 1, 1, 0, 1, 6, 1, 11, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

},
//第四层地图
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 22, 1, 0, 160, 161, 162, 0, 1, 104, 1, 0 },	// 
	{ 0, 26, 1, 21, 0, 1, 1, 1, 0, 21, 1, 27, 0 },
	{ 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 256, 1, 0 },
	{ 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0 },
	{ 0, 1, 254, 1, 6, 1, 252, 1, 1, 255, 1, 1, 0 },
	{ 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 252, 1, 251, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 6, 0, 0, 6, 0, 0, 0, 6, 0, 0, 6, 0 },
	{ 0, 1, 0, 1, 253, 1, 0, 1, 254, 1, 0, 1, 0 },
	{ 0, 1, 0, 251, 1, 21, 0, 24, 1, 26, 0, 17, 0 },
	{ 0, 11, 0, 21, 251, 21, 0, 1, 251, 1, 0, 12, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
},
//第五层地图
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 11, 0, 1, 252, 6, 1, 0, 1, 1, 6, 1, 0 },
	{ 0, 1, 0, 1, 1, 0, 21, 0, 251, 251, 0, 252, 0 },
	{ 0, 1, 6, 253, 1, 0, 1, 0, 21, 21, 0, 1, 0 },
	{ 0, 0, 0, 0, 6, 0, 253, 0, 21, 21, 0, 1, 0 },
	{ 0, 21, 1, 254, 1, 0, 1, 0, 0, 0, 0, 1, 0 },
	{ 0, 21, 1, 1, 253, 0, 1, 251, 1, 1, 1, 1, 0 },
	{ 0, 0, 256, 0, 0, 0, 1, 0, 0, 0, 0, 252, 0 },
	{ 0, 1, 1, 1, 1, 0, 251, 0, 1, 1, 1, 1, 0 },
	{ 0, 24, 21, 26, 42, 0, 1, 0, 6, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0 },
	{ 0, 12, 19, 1, 1, 1, 1, 0, 1, 2, 1, 31, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
//第六层
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 12, 0, 21, 21, 0, 1, 254, 1, 251, 21, 1, 0 },
	{ 0, 17, 0, 21, 21, 0, 1, 0, 0, 0, 0, 6, 0 },
	{ 0, 1, 0, 0, 252, 0, 1, 0, 26, 1, 255, 1, 0 },
	{ 0, 1, 6, 6, 1, 6, 1, 0, 132, 1, 1, 253, 0 },	//我有一把蓝钥匙，你出50金币我就卖给你
	{ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 252, 254, 1, 21, 1, 255, 256, 1, 1, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0 },
	{ 0, 254, 1, 1, 105, 0, 1, 6, 6, 1, 6, 1, 0 },
	{ 0, 1, 253, 1, 25, 0, 1, 0, 0, 252, 0, 252, 0 },
	{ 0, 6, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0 },
	{ 0, 1, 251, 1, 1, 255, 1, 0, 26, 26, 0, 11, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
//第七层
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 11, 0, 24, 0, 1, 132, 1, 0, 21, 0, 251, 0 },
	{ 0, 1, 0, 26, 0, 1, 1, 1, 0, 21, 0, 252, 0 },
	{ 0, 1, 0, 253, 0, 252, 0, 256, 0, 26, 0, 251, 0 },
	{ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
	{ 0, 6, 0, 6, 0, 7, 0, 6, 0, 255, 0, 6, 0 },
	{ 0, 1, 256, 1, 254, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 6, 0, 6, 0, 6, 0, 6, 0, 256, 0, 6, 0 },
	{ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
	{ 0, 1, 0, 1, 0, 253, 0, 252, 0, 27, 0, 1, 0 },
	{ 0, 251, 0, 251, 0, 21, 0, 254, 0, 21, 0, 17, 0 },
	{ 0, 1, 252, 1, 0, 21, 0, 27, 0, 21, 0, 12, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
// 第八层
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 12, 1, 6, 6, 1, 11, 1, 0, 21, 1, 21, 0 },
	{ 0, 17, 1, 0, 0, 1, 1, 251, 0, 1, 23, 1, 0 },
	{ 0, 6, 0, 0, 0, 0, 6, 0, 0, 27, 1, 26, 0 },
	{ 0, 1, 0, 21, 21, 21, 1, 1, 0, 0, 10, 0, 0 },
	{ 0, 26, 0, 0, 0, 0, 0, 254, 0, 257, 1, 257, 0 },//5,9
	{ 0, 1, 252, 251, 252, 1, 0, 1, 0, 1, 1, 1, 0 },
	{ 0, 0, 0, 0, 0, 6, 0, 253, 0, 0, 0, 6, 0 },
	{ 0, 1, 1, 1, 253, 1, 255, 1, 254, 1, 1, 1, 0 },
	{ 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0 },
	{ 0, 251, 1, 0, 24, 21, 0, 22, 26, 0, 1, 255, 0 },
	{ 0, 1, 253, 7, 21, 25, 0, 21, 1, 6, 256, 1, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
//第九层
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 255, 6, 1, 12, 1, 6, 251, 1, 26, 0 },
	{ 0, 1, 21, 1, 0, 1, 17, 1, 0, 1, 251, 1, 0 },
	{ 0, 256, 0, 0, 0, 0, 7, 0, 0, 0, 0, 1, 0 },
	{ 0, 1, 21, 1, 0, 21, 1, 21, 6, 6, 1, 1, 0 },
	{ 0, 25, 1, 253, 6, 1, 24, 1, 0, 0, 2, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 252, 0, 1, 1, 256, 0 },
	{ 0, 21, 1, 6, 256, 21, 0, 1, 0, 32, 0, 1, 0 },
	{ 0, 256, 1, 0, 1, 1, 0, 1, 0, 0, 0, 6, 0 },
	{ 0, 6, 0, 0, 0, 6, 0, 1, 0, 21, 1, 254, 0 },
	{ 0, 1, 26, 0, 1, 255, 0, 253, 0, 1, 255, 1, 0 },
	{ 0, 11, 1, 7, 1, 1, 6, 1, 6, 254, 1, 26, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
// 第十层
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0 },
	{ 0, 255, 255, 255, 0, 0, 1, 0, 0, 255, 255, 255, 0 },
	{ 0, 1, 256, 1, 10, 1, 258, 1, 10, 1, 256, 1, 0 },
	{ 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0 },
	{ 0, 255, 25, 255, 0, 1, 1, 1, 0, 255, 24, 255, 0 },
	{ 0, 1, 256, 1, 0, 0, 1, 0, 0, 1, 256, 1, 0 },
	{ 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0 },
	{ 0, 6, 0, 6, 0, 0, 8, 0, 0, 6, 0, 6, 0 },
	{ 0, 17, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0 },
	{ 0, 12, 0, 1, 254, 1, 1, 1, 254, 1, 0, 27, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
//第十一层地图
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 1, 0, 24, 1, 6, 1, 0, 26, 21, 0 },
	{ 0, 1, 34, 1, 0, 1, 253, 0, 262, 0, 1, 1, 0 },
	{ 0, 1, 1, 1, 0, 6, 0, 0, 1, 6, 1, 1, 0 },
	{ 0, 0, 10, 0, 0, 1, 260, 0, 0, 0, 0, 259, 0 },
	{ 0, 261, 1, 261, 0, 262, 1, 6, 261, 1, 0, 1, 0 },
	{ 0, 1, 1, 1, 0, 0, 0, 0, 1, 26, 0, 1, 0 },
	{ 0, 27, 1, 1, 260, 1, 1, 6, 259, 1, 0, 1, 0 },
	{ 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 260, 0 },
	{ 0, 1, 260, 1, 259, 6, 1, 1, 1, 1, 253, 1,0 },
	{ 0, 21, 1, 1, 1, 0, 17, 0, 0, 6, 0, 1, 0 },
	{ 0, 21, 21, 21, 21, 0, 12, 0, 27, 260, 0, 11, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

},
//第十二层地图
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 134, 2, 1, 0, 21, 24, 21, 0, 1, 2, 2, 0 },
	{ 0, 0, 0, 260, 0, 1, 0, 1, 0, 1, 0, 0, 0 },
	{ 0, 1, 1, 1, 0, 261, 1, 261, 0, 1, 262, 1, 0 },
	{ 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 1, 0 },
	{ 0, 1, 261, 1, 6, 1, 262, 1, 0, 26, 1, 260, 0 },
	{ 0, 0, 0, 0, 0, 1, 1, 260, 6, 1, 25, 1, 0 },
	{ 0, 21, 21, 1, 0, 1, 27, 1, 0, 21, 1, 259, 0 },
	{ 0, 21, 22, 1, 0, 0, 0, 0, 0, 7, 0, 6, 0  },
	{ 0, 1, 1, 262, 0, 160, 161, 162, 0, 259, 1, 262, 0 },
	{ 0, 0, 0, 6, 0, 26, 1, 26, 0, 0, 1, 0, 0 },
	{ 0, 11, 1, 1, 253, 1, 1, 1, 253, 1, 17, 12 }
},
//第十三层地图
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0 },
	{ 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0 },
	{ 0, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 0 },
	{ 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0 },
	{ 0, 4, 4, 4, 0, 0, 39, 0, 0, 4, 4, 4, 0 },
	{ 0, 4, 4, 4, 0, 0, 4, 0, 0, 4, 4, 4, 0 },
	{ 0, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 0 },
	{ 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0 },
	{ 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0 },
	{ 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0 },
	{ 0, 12, 17, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0 }
},
//第十四层地图
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 263, 1, 263, 0, 25, 21, 26, 0, 21, 21, 21, 0 },
	{ 0, 1, 263, 1, 0, 259, 0, 263, 0, 1, 1, 21, 0 },
	{ 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 6, 0, 0 },
	{ 0, 0, 7, 0, 0, 7, 0, 6, 0, 1, 263, 1, 0 },
	{ 0, 26, 1, 1, 260, 1, 264, 1, 260, 1, 1, 1, 0 },
	{ 0, 1, 259, 1, 0, 0, 6, 0, 0, 26, 1, 262, 0 },
	{ 0, 6, 0, 6, 0, 1, 1, 1, 0, 0, 0, 6, 0 },
	{ 0, 1, 0, 1, 262, 1, 6, 1, 259, 1, 259, 1, 0 },
	{ 0, 261, 0, 261, 0, 0, 2, 0, 0, 6, 0, 0, 0, },
	{ 0, 1, 0, 1, 0, 26, 1, 1, 0, 1, 1, 17, 0 },
	{ 0, 22, 0, 1, 6, 1, 11, 1, 0, 1, 1, 12, 0},
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
//第十五层
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 25, 263, 1, 6, 1, 11, 1, 0, 99, 1, 1, 0 },
	{ 0, 262, 1, 1, 0, 1, 1, 1, 0, 1, 1, 259, 0 },
	{ 0, 1, 1, 259, 0, 0, 10, 0, 0, 0, 0, 6, 0 },
	{ 0, 6, 0, 0, 0, 284, 285, 286, 0, 260, 1, 1, 0 },
	{ 0, 1, 0, 21, 0, 287, 288, 289, 0, 1, 260, 1, 0 },
	{ 0, 1, 0, 22, 0, 290, 291, 292, 0, 6, 0, 261, 0},
	{ 0, 259, 0, 21, 0, 1, 1, 1, 0, 1, 0, 1, 0 },
	{ 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 27, 0 },
	{ 0, 1, 6, 1, 0, 0, 1, 0, 0, 6, 0, 0, 0 },
	{ 0, 260, 0, 260, 0, 1, 17, 1, 0, 1, 253, 1, 0 },
	{ 0, 1, 261, 1, 0, 1, 12, 1, 6, 253, 1, 136, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
//第十六层地图
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 21, 260, 1, 0, 1, 12, 1, 0, 1, 1, 260, 0 },
	{ 0, 21, 261, 1, 6, 1, 17, 1, 6, 259, 1, 1, 0 },
	{ 0, 21, 260, 1, 0, 262, 1, 21, 0, 1, 1, 26, 0 },
	{ 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0 },
	{ 0, 24, 21, 1, 0, 21, 1, 1, 0, 1, 262, 1, 0 },
	{ 0, 26, 1, 264, 6, 1, 263, 1, 0, 1, 1, 1, 0 },
	{ 0, 25, 21, 1, 0, 1, 1, 21, 0, 260, 1, 22, 0 },
	{ 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 6, 0, 0 },
	{ 0, 1, 259, 1, 0, 260, 1, 260, 0, 1, 261, 1, 0 },
	{ 0, 1, 1, 1, 6, 1, 1, 1, 6, 1, 0, 0, 0 },
	{ 0, 106, 1, 1, 0, 1, 11, 1, 0, 268, 2, 2, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
},
//第十七层地图
//17
{

	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 1, 0, 1, 11, 1, 0, 24, 1, 25, 0 },
	{ 0, 1, 33, 1, 0, 1, 1, 1, 0, 1, 27, 1, 0 },
	{ 0, 1, 1, 1, 0, 263, 0, 260, 0, 21, 1, 21, 0 },
	{ 0, 0, 10, 0, 0, 1, 0, 1, 0, 0, 10, 0, 0 },
	{ 0, 257, 1, 257, 0, 6, 0, 7, 0, 263, 1, 263, 0 },
	{ 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0 },
	{ 0, 0, 10, 0, 0, 262, 0, 259, 0, 0, 10, 0, 0 },
	{ 0, 257, 1, 257, 0, 1, 1, 1, 0, 262, 1, 262, 0 },
	{ 0, 1, 1, 1, 0, 0, 261, 0, 0, 1, 1, 1, 0 },
	{ 0, 0, 6, 0, 0, 1, 1, 1, 0, 0, 6, 0, 0 },
	{ 0, 26, 1, 1, 260, 17, 12, 1, 260, 1, 1, 26, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
},
//第十八层
{

	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 11, 1, 1, 7, 1, 12, 1, 6, 261, 1, 21, 0 },
	{ 0, 1, 1, 108, 0, 1, 17, 1, 0, 1, 259, 21, 0 },
	{ 0, 6, 0, 0, 0, 0, 2, 0, 0, 1, 1, 22, 0 },
	{ 0, 1, 26, 1, 6, 263, 1, 263, 6, 262, 1, 21, 0 },
	{ 0, 264, 1, 264, 0, 1, 1, 1, 0, 1, 260, 21, 0 },
	{ 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 262, 1, 1, 1, 1, 1, 1, 1, 264, 1, 0 },
	{ 0, 6, 0, 0, 6, 0, 0, 0, 6, 0, 0, 6, 0 },
	{ 0, 261, 1, 0, 260, 260, 0, 259, 259, 0, 1, 261, 0 },
	{ 0, 1, 21, 0, 260, 260, 0, 259, 259, 0, 21, 1, 0 },
	{ 0, 26, 24, 0, 1, 21, 0, 21, 1, 0, 25, 26, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
//第十九层
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 12, 1, 0, 26, 1, 261, 1, 22, 0, 21, 24, 0 },
	{ 0, 17, 1, 0, 1, 1, 0, 1, 1, 0, 260, 1, 0 },
	{ 0, 6, 0, 0, 263, 0, 2, 0, 263, 0, 6, 0, 0 },
	{ 0, 253, 1, 0, 1, 1, 2, 1, 1, 0, 1, 1, 0 },
	{ 0, 1, 1, 0, 21, 1, 0, 1, 21, 0, 259, 259, 0 },
	{ 0, 6, 0, 0, 1, 264, 1, 264, 1, 0, 1, 1, 0 },
	{ 0, 260, 1, 0, 0, 0, 7, 0, 0, 0, 0, 6, 0 },
	{ 0, 1, 1, 259, 1, 1, 1, 1, 263, 1, 1, 262, 0 },
	{ 0, 6, 0, 0, 0, 0, 263, 0, 0, 26, 21, 1, 0 },
	{ 0, 1, 0, 1, 6, 21, 1, 21, 0, 0, 0, 260, 0 },
	{ 0, 259, 1, 260, 0, 1, 11, 1, 6, 1, 253, 1, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
},
//第二十层
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 0 },
	{ 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0 },
	{ 0, 24, 25, 0, 1, 1, 1, 1, 1, 0, 26, 27, 0 },
	{ 0, 21, 1, 0, 1, 260, 260, 260, 1, 0, 1, 21, 0 },
	{ 0, 0, 7, 0, 1, 260, 1, 260, 1, 0, 7, 0, 0 },
	{ 0, 253, 1, 0, 1, 260, 260, 260, 1, 0, 1, 253, 0 },
	{ 0, 1, 253, 0, 1, 1, 1, 1, 1, 0, 253, 1, 0 },
	{ 0, 6, 0, 0, 0, 0, 8, 0, 0, 0, 0, 6, 0 },
	{ 0, 1, 264, 1, 0, 1, 17, 1, 0, 1, 264, 1, 0 },
	{ 0, 26, 1, 1, 261, 1, 12, 1, 261, 1, 1, 26, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
{
	// 21
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 1, 1, 1, 12, 1, 1, 1, 1, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 17, 1, 1, 1, 1, 1, 0 },// 109
	{ 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0 },
	{ 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 109, 1, 1, 1, 1, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0 },
	{ 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0,  1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 1, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
{
	// 22
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 1, 11, 1, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 1, 17, 1, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 1, 12, 1, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
{
	// 23
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 12, 1, 3, 3, 3, 1, 1, 1, 1, 1, 11, 0 },
	{ 0, 17, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },// 110
	{ 0, 1, 3, 1, 3, 3, 1, 1, 3, 3, 3, 1, 0 },
	{ 0, 1, 3, 1, 1, 3, 1, 1, 3, 1, 3, 1, 0 },
	{ 0, 1, 3, 3, 3, 3, 1, 1, 3, 3, 3, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 1, 0 },
	{ 0, 1, 3, 1, 1, 3, 1, 3, 1, 1, 1, 1, 0 },
	{ 0, 1, 3, 1, 1, 3, 1, 3, 3, 3, 1, 1, 0 },
	{ 0, 1, 3, 3, 3, 3, 1, 3, 1, 1, 1, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 110, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
{
	// 24
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0 },
	{ 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0 },
	{ 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 },
	{ 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0 },
	{ 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0 },
	{ 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0 },
	{ 0, 1, 0, 0, 0, 0, 8, 0, 0, 0, 0, 1, 0 },
	{ 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0 },
	{ 0, 1, 11, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0 },
	{ 0, 12, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
{
	// 25
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0 },
	{ 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0 },
	{ 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0 },
	{ 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
	{ 0, 1, 0, 1, 1, 1, 282, 1, 1, 1, 0, 1, 0 },
	{ 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0 },
	{ 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0 },
	{ 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0 },
	{ 0, 1, 12, 1, 0, 0, 8, 0, 0, 1, 1, 1, 0 },
	{ 0, 11, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
{
	// 26
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0 },
	{ 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0 },
	{ 0, 1, 0, 0, 0, 4, 4, 4, 0, 0, 0, 1, 0 },
	{ 0, 1, 0, 0, 4, 4, 4, 4, 4, 0, 0, 1, 0 },
	{ 0, 1, 0, 0, 4, 4, 163, 4, 4, 0, 0, 1, 0 },
	{ 0, 1, 0, 0, 4, 4, 4, 4, 4, 0, 0, 1, 0 },// 163
	{ 0, 1, 0, 0, 4, 4, 8, 4, 4, 0, 0, 1, 0 },
	{ 0, 1, 1, 0, 0, 4, 8, 4, 0, 0, 1, 1, 0 },
	{ 0, 1, 11, 1, 0, 0, 8, 0, 0, 1, 1, 1, 0 },
	{ 0, 12, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
{
	//27
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 1, 111, 1, 0, 0, 0, 0, 0 },	// 111
	{ 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 12, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0 },
	{ 0, 1, 17, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
{
	// 28
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0 },// 109
	{ 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 0, 1, 137, 1, 0, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 11, 1, 1, 1, 1, 1, 1, 1, 1, 17, 12, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
{
	//29
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 0, 0, 1, 100, 1, 0, 0, 0, 0, 0 },// 109
	{ 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 17, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0 },
	{ 0, 12, 1, 0, 0, 1, 11, 1, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
{
	// 30
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 1, 11, 1, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0 },// 109
	{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0 },
	{ 0, 1, 1, 259, 252, 251, 1, 251, 252, 259, 1, 1, 0 },
	{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 1, 17, 1, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 1, 12, 1, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
//31
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 1, 1, 21, 21, 0, 12, 0, 1, 1, 26, 112, 0 },
		{ 0, 270, 1, 21, 21, 0, 17, 0, 267, 1, 1, 1, 0 },
		{ 0, 1, 267, 0, 0, 0, 1, 0, 6, 0, 266, 266, 0 },
		{ 0, 1, 1, 6, 22, 0, 1, 0, 24, 0, 1, 1, 0 },
		{ 0, 6, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0 },
		{ 0, 1, 266, 1, 1, 1, 1, 1, 1, 1, 266, 1, 0 },
		{ 0, 6, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0 },
		{ 0, 1, 1, 0, 25, 0, 263, 0, 27, 6, 1, 1, 0 },
		{ 0, 266, 266, 0, 6, 0, 263, 0, 0, 0, 268, 1, 0 },
		{ 0, 1, 1, 1, 271, 0, 1, 0, 21, 21, 1, 268, 0 },
		{ 0, 138, 26, 1, 1, 0, 11, 0, 21, 21, 1, 1, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
	},
	//32
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 25, 1, 7, 1, 1, 1, 1, 1, 1, 1, 11, 0},
	{ 0, 1, 24, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0 },
	{ 0, 6, 0, 0, 1, 6, 1, 6, 1, 0, 0, 0, 0 },
	{ 0, 267, 1, 268, 1, 0, 1, 0, 266, 0, 21, 27, 0 },
	{ 0, 1, 21, 1, 268, 0, 1, 0, 1, 6, 1, 21, 0 },
	{ 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0 },
	{ 0, 21, 21, 21, 21, 0, 1, 0, 271, 0, 21, 22, 0},
	{ 0, 1, 1, 1, 22, 0, 1, 0, 1, 6, 1, 21, 0 },
	{ 0, 0, 10, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
	{ 0, 269, 1, 269, 1, 1, 1, 1, 1, 160, 161, 162, 0 },
	{ 0, 1, 1, 1, 1, 12, 17, 0, 266, 1, 1, 1, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
//33
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 11, 1, 6, 263, 1, 268, 6, 1, 1, 17, 12, 0 },
	{ 0, 1, 1, 0, 1, 26, 1, 0, 6, 0, 0, 0, 0 },
	{ 0, 7, 0, 0, 113, 1, 21, 0, 1, 1, 1, 27, 0 },
	{ 0, 1, 26, 0, 0, 6, 0, 0, 0, 0, 1, 0, 0 },
	{ 0, 268, 1, 0, 1, 1, 263, 1, 0, 266, 1, 266, 0 },
	{ 0, 1, 1, 0, 270, 0, 0, 6, 0, 1, 1, 1, 0 },
	{ 0, 1, 268, 6, 1, 1, 266, 1, 0, 267, 1, 267, 0 },
	{ 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
	{ 0, 1, 1, 263, 0, 1, 267, 1, 0, 1, 1, 1, 0 },
	{ 0, 270, 0, 1, 0, 21, 0, 268,3, 1, 35, 1, 0 },
	{0, 21, 267, 1, 7, 1, 6, 1, 0, 1, 1, 1, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
},
//34
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 12, 17, 26, 0, 1, 21, 1, 0, 21, 21, 25, 0 },
	{ 0, 1, 1, 1, 6, 268, 1, 271, 6, 1, 21, 26, 0 },
	{ 0, 1, 268, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 6, 0, 0, 251, 0, 270, 0, 259, 0, 267, 0 },
	{ 0, 1, 1, 1, 0, 6, 0, 6, 0, 6, 0, 6, 0 },
	{ 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
	{ 0, 1, 1, 1, 0, 6, 0, 6, 0, 6, 0, 6, 0 },
	{ 0, 0, 6, 0, 0, 266, 0, 252, 0, 271, 0, 253, 0 },
	{ 0, 1, 1, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 270, 0, 1, 6, 1, 1, 1, 6, 267, 1, 26, 0 },
	{ 0, 27, 267, 1, 0, 1, 11, 1, 0, 1, 21, 24, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

},
//35
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 11, 0 },
	{ 0, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0 },
	{ 0, 2, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0 },
	{ 0, 2, 0, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0 },
	{ 0, 2, 0, 2, 0, 293, 294, 295, 0, 0, 0, 0, 0 },
	{ 0, 2, 0, 2, 0, 296, 297, 298, 0, 0, 0, 0, 0 },
	{ 0, 2, 0, 2, 0, 299, 300, 301, 0, 0, 0, 0, 0 },
	{ 0, 2, 0, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0 },
	{ 0, 2, 0, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0 },
	{ 0, 2, 0, 2, 0, 1, 17, 1, 0, 0, 0, 0, 0 },
	{ 0, 2, 2, 2, 0, 1, 12, 1, 0, 0, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

},
//36
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 114, 1, 267, 1, 1, 1, 263, 1, 271, 1, 12, 0 },
	{ 0, 1, 1, 0, 2, 0, 6, 0, 2, 0, 1, 17, 0 },
	{ 0, 268, 0, 0, 2, 0, 1, 0, 2, 0, 0, 268, 0 },
	{ 0, 1, 2, 2, 2, 0, 1, 0, 2, 2, 2, 1, 0 },
	{ 0, 271, 0, 0, 0, 1, 266, 1, 0, 0, 0, 270, 0 },
	{ 0, 1, 6, 1, 1, 268, 1, 268, 1, 1, 6, 1, 0 },
	{ 0, 1, 0, 0, 0, 1, 271, 1, 0, 0, 0, 271, 0 },
	{ 0, 1, 2, 2, 2, 0, 1, 0, 2, 2, 2, 1, 0 },
	{ 0, 270, 0, 0, 2, 0, 1, 0, 2, 0, 0, 1, 0 },
	{ 0, 1, 1, 0, 2, 0, 6, 0, 2, 0, 1, 1, 0 },
	{ 0, 27, 1, 267, 1, 21, 1, 263, 1, 270, 1, 11, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
},
{
	// 37
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	{ 0, 11, 1, 6, 1, 1, 1, 1, 1, 267, 1, 27, 0 },
	{ 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0 },
	{ 0, 7, 0, 0, 26, 26, 0, 26, 26, 0, 0, 271, 0 },
	{ 0, 1, 0, 26, 26, 21, 0, 26, 26, 26, 0, 1, 0 },
	{ 0, 1, 0, 21, 21, 45, 0, 23, 21, 21, 0, 1, 0 },
	{ 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 270, 0 },
	{ 0, 1, 0, 25, 24, 27, 0, 24, 24, 24, 0, 1, 0 },
	{ 0, 1, 0, 21, 21, 21, 0, 25, 25, 25, 0, 1, 0 },
	{ 0, 267, 0, 0, 22, 22, 0, 27, 21, 0, 0, 271, 0 },
	{ 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 17, 0 },
	{ 0, 115, 1, 268, 1, 1, 1, 1, 1, 266, 1, 12, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
},
// 38
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 12, 17, 8, 268, 1, 1, 1, 268, 6, 1, 11, 0 },
		{ 0, 1, 1, 0, 1, 139, 21, 1, 1, 0, 1, 1, 0 },
		{ 0, 266, 0, 0, 0, 0, 0, 6, 0, 0, 0, 6, 0 },
		{ 0, 1, 1, 267, 267, 1, 0, 1, 0, 21, 0, 1, 0 },
		{ 0, 0, 1, 0, 0, 7, 0, 1, 0, 21, 0, 1, 0 },
		{ 0, 1, 1, 1, 7, 7, 0, 266, 0, 21, 0, 266, 0 }, // 7 2
		{ 0, 1, 36, 1, 0, 0, 0, 270, 0, 1, 271, 1, 0 },
		{ 0, 1, 1, 1, 0, 25, 26, 1, 0, 0, 0, 6, 0 },
		{ 0, 0, 10, 0, 0, 0, 0, 0, 0, 21, 1, 266, 0 },
		{ 0, 269, 1, 269, 0, 1, 1, 1, 0, 1, 271, 1, 0 },
		{ 0, 1, 1, 1, 6,270, 1, 262, 6, 267, 1, 27, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
	},
		//39
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 12, 0 },
		{ 0, 1, 6, 1, 6, 1, 6, 1, 0, 140, 1, 17, 0 },
		{ 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 21, 0 },
		{ 0, 1, 6, 1, 6, 1, 6, 1, 0, 0, 6, 0, 0 },
		{ 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 267, 0 },
		{ 0, 1, 6, 1, 6, 1, 6, 1, 0, 268, 0, 24, 0 }, 
		{ 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 266, 0 },
		{ 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0 },
		{ 0, 1, 1, 266, 0, 270, 25, 271, 0, 1, 271, 1, 0 },
		{ 0, 0, 266, 1, 6, 1, 0, 1, 6, 1, 1, 1, 0 },
		{ 0, 116, 1, 21, 0, 1, 268, 1, 0, 26, 1, 11, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
	},
		// 40
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 1, 1, 1, 1, 1, 272, 1, 1, 1, 1, 1, 0 },
		{ 0, 1, 270, 270, 270, 1, 1, 1, 271, 271, 271, 1, 0 },
		{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
		{ 0, 1, 1, 266, 266, 266, 1, 267, 267, 267, 1, 1, 0 },
		{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
		{ 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 }, 
		{ 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },	//8 6
		{ 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0 },
		{ 0, 25, 21, 1, 0, 268, 1, 268, 0, 26, 270, 1, 0 },
		{ 0, 27, 1, 1, 0, 1, 1, 1, 0, 267, 1, 1, 0 },
		{ 0, 24, 1, 271, 7, 1, 1, 1, 6, 1, 17, 12, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
	},
//41
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 26, 0, 1, 22, 0, 12, 0, 22, 1, 0, 26, 0 },
		{ 0, 6, 303, 1, 1, 0, 17, 0, 1, 1, 0, 6, 0 },
		{ 0, 6, 0, 1, 0, 0, 1, 0, 0, 1, 0, 6, 0 },
		{ 0, 6, 0, 6, 0, 307, 1, 307, 0, 6, 0, 6, 0 },
		{ 0, 1, 1, 302, 0, 0, 1, 0, 0, 302, 1, 1, 0 },
		{ 0, 305, 1, 1, 1, 7, 1, 7, 1, 1, 1, 305, 0 },
		{ 0, 1, 305, 1, 304, 0, 6, 0, 304, 1, 305, 1, 0 },
		{ 0, 6, 0, 0, 6, 0, 6, 0, 6, 0, 0, 6, 0 },
		{ 0, 6, 0, 26, 1, 0, 6, 0, 1, 26, 0, 6, 0 },
		{ 0, 6, 0, 21, 21, 0, 1, 0, 21, 21, 0, 6, 0 },
		{ 0, 27, 0, 21, 24, 0, 11, 0, 25, 21, 0, 27, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
	},
//42
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 11, 1, 1, 0, 1, 1, 23, 0, 21, 22, 21, 0 },
		{ 0, 1, 1, 304, 0, 1, 1, 1, 0, 21, 21, 21, 0 },
		{ 0, 0, 0, 6, 0, 1, 1, 1, 0, 0, 1, 0, 0 },
		{ 0, 117, 1, 1, 0, 0, 306, 0, 0, 302, 1, 303, 0 },
		{ 0, 1, 1, 304, 6, 1, 1, 1, 6, 1, 1, 1, 0 },
		{ 0, 6, 0, 0, 0, 0, 1, 0, 0, 1, 1, 302, 0 },
		{ 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0 },
		{ 0, 0, 0, 305, 0, 1, 1, 1, 0, 307, 1, 307, 0 },
		{ 0, 27, 21, 21, 0, 0, 1, 0, 0, 0, 1, 0, 0 },
		{ 0, 305, 0, 0, 0, 1, 272, 1, 0, 21, 21, 21, 0 },
		{ 0, 21, 21, 27, 0, 17, 12, 1, 0, 21, 22, 21, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
	},
//43
	{
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		{ 0, 12, 1, 6, 1, 304, 1, 6, 6, 307, 1, 1, 0 },
		{ 0, 17, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0 },
		{ 0, 1, 1, 6, 1, 0, 306, 0, 1, 1, 0, 1, 0 },
		{ 0, 7, 0, 0, 303, 0, 1, 306, 1, 38, 0, 1, 0 },
		{ 0, 1, 304, 1, 1, 0, 0, 0, 0, 0, 0, 6, 0 },
		{ 0, 1, 0, 6, 0, 0, 27, 1, 6, 1, 1, 1, 0 },
		{ 0, 1, 0, 1, 1, 304, 1, 1, 0, 302, 1, 26, 0 },
		{ 0, 6, 0, 0, 0, 0, 0, 0, 0, 1, 21, 1, 0 },
		{ 0, 1, 305, 0, 27, 1, 306, 1, 0, 0, 0, 6, 0 },
		{ 0, 1, 1, 0, 27, 0, 0, 1, 6, 1, 305, 1, 0 },
		{ 0, 11, 1, 0, 27, 1, 7, 1, 0, 1, 1, 22, 0 },
		{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
	},

//44
		{
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			{ 0, 17, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			{ 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0 },
			{ 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0 },
			{ 0, 1, 1, 1, 0, 0, 26, 0, 0, 1, 1, 1, 0 },
			{ 0, 1, 1, 0, 0, 26, 40, 26, 0, 0, 1, 1, 0 },
			{ 0, 1, 1, 1, 0, 0, 26, 0, 0, 1, 1, 1, 0 },
			{ 0, 1, 1, 1, 1, 0, 10, 0, 1, 1, 1, 1, 0 },
			{ 0, 1, 1, 1, 1, 308, 1, 308, 1, 1, 1, 1, 0 },
			{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
//45
		{
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 12, 17, 1, 1, 1, 1, 1, 1, 1, 1, 11, 0 },
			{ 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0 },
			{ 0, 24, 24, 1, 0, 302, 1, 303, 0, 141, 1, 1, 0 },
			{ 0, 7, 0, 306, 0, 1, 1, 1, 0, 1, 1, 304, 0 },
			{ 0, 25, 25, 1, 0, 303, 1, 302, 0, 0, 0, 6, 0 },
			{ 0, 7, 0, 306, 0, 0, 6, 0, 0, 118, 0, 1, 0 },
			{ 0, 1, 1, 1, 6, 1, 1, 305, 1, 1, 1, 21, 0 } ,
			{ 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 302, 1, 0 },
			{ 0, 1, 1, 1, 0, 306, 1, 0, 307, 0, 0, 6, 0 },
			{ 0, 1, 50, 1, 10, 1, 1, 10, 1, 6, 1, 1, 0 },
			{ 0, 1, 1, 1, 0, 306, 1, 0, 307, 0, 1, 27, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
//0墙 1地板 2暗墙 3隐形墙 4岩浆 5虚空 6黄门 7蓝门 8红门 9铁门 10机关门
//11上楼 12下楼 16-19角色朝向
// 21 22 23 黄蓝红钥匙	24 25红蓝宝石	26 27 红蓝血瓶
// 35 骑士剑 36 骑士盾  38圣盾 40神圣盾
// 46 中心对称飞行器 45 炸弹
// 100 小偷 101 商人 102 老头1 103 老头2
// 251绿史莱姆 252红史莱姆 253蝙蝠 254法师 255骷髅人 256骷髅士兵  257初级卫兵  259大史莱姆 260大蝙蝠 261高级法师 262兽人 263兽人武士 264石头人
// 265吸血鬼 266鬼战士 267战士 268幽灵 269中级卫兵 270双手剑士 271骑士 272骑士队长 魔龙:293左上 294中上 295右上 296左中 297中中 298右中 299左下 300中下 301右下
// 302初级巫师 303高级巫师 304史莱姆王 305吸血蝙蝠 306黑暗骑士 307魔法警卫 308高级卫兵 
//46
		{
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 1, 303, 6, 1, 160, 161, 162, 1, 7, 1, 12, 0 },
			{ 0, 26, 1, 0, 1, 1, 1, 1, 1, 0, 1, 17, 0 },
			{ 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0 },
			{ 0, 1, 302, 6, 1, 1, 1, 1, 1, 305, 1, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0 },
			{ 0, 267, 1, 270, 1, 271, 0, 26, 1, 6, 304, 1, 0 },
			{ 0, 1, 0, 0, 0, 1, 0, 1, 303, 0, 1, 1, 0 },
			{ 0, 262, 0, 51, 0, 304, 0, 6, 0, 0, 0, 6, 0 },
			{ 0, 1, 0, 1, 302, 1, 0, 1, 119, 0, 302, 1, 0 },
			{ 0, 260, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0 },
			{ 0, 1, 255, 1, 252, 1, 7, 1, 1, 6, 1, 11, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		{
			//47
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 11, 1, 7, 1, 1, 1, 6, 1, 1, 1, 21, 0 },
			{ 0, 1, 1, 0, 1, 142, 1, 0, 303, 0, 0, 25, 0 },
			{ 0, 1, 0, 0, 0, 0, 0, 0, 1, 304, 1, 21, 0 },
			{ 0, 1, 0, 1, 6, 303, 1, 0, 6, 0, 0, 0, 0 },
			{ 0, 1, 0, 305, 0, 1, 302, 0, 1, 302, 1, 1, 0 },
			{ 0, 1, 6, 1, 0, 1, 1, 0, 21, 1, 1, 305, 0 },
			{ 0, 1, 0, 1, 0, 22, 21, 0, 0, 0, 0, 6, 0 },
			{ 0, 1, 0, 1, 7, 24, 25, 0, 1, 1, 1, 1, 0 },
			{ 0, 303, 0, 0, 0, 0, 0, 0, 304, 0, 0, 0, 0 },
			{ 0, 1, 1, 0, 26, 1, 24, 0, 1, 0, 1, 17, 0 },
			{ 0, 1, 1, 6, 1, 302, 1, 6, 1, 1, 1, 12, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		{
			//48
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 307, 27, 1, 0, 1, 1, 26, 26, 26, 1, 1, 0 },
			{ 0, 1, 1, 120, 0, 7, 0, 0, 0, 0, 0, 7, 0 },
			{ 0, 1, 303, 1, 0, 1, 0, 307, 0, 307, 0, 1, 0 },
			{ 0, 0, 7, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0 },
			{ 0, 1, 1, 304, 1, 1, 0, 307, 0, 307, 0, 1, 0 },
			{ 0, 1, 0, 0, 6, 0, 0, 0, 0, 0, 0, 1, 0 },
			{ 0, 305, 0, 1, 302, 1, 0, 1, 1, 1, 302, 1, 0 },
			{ 0, 1, 0, 24, 1, 26, 0, 0, 10, 0, 0, 1, 0 },
			{ 0, 302, 0, 0, 6, 0, 0, 1, 1, 1, 0, 1, 0 },
			{ 0, 1, 0, 1, 306, 1, 0, 1, 37, 1, 0, 17, 0 },
			{ 0, 11, 0, 25, 1, 27, 0, 1, 1, 1, 0, 12, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		{
			//49
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
			{ 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0 },
			{ 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 },
			{ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			{ 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0 },
			{ 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0 },
			{ 0, 1, 0, 1, 0, 0, 10, 0, 0, 1, 0, 1, 0 },
			{ 0, 1, 0, 1, 0, 306, 1, 306, 0, 1, 0, 1, 0 },
			{ 0, 1, 1, 1, 0, 0, 10, 0, 0, 1, 1, 1, 0 },
			{ 0, 0, 0, 0, 0, 303, 1, 303, 0, 0, 0, 0, 0 },
			{ 0, 12, 17, 8, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
				{
					//50
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
					{ 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 },
					{ 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 },
					{ 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 },
					{ 0, 5, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5, 0 },
					{ 0, 5, 5, 5, 0, 1, 94, 1, 0, 5, 5, 5, 0 },
					{ 0, 5, 5, 5, 0, 1, 1, 1, 0, 5, 5, 5, 0 },
					{ 0, 5, 5, 5, 0, 1, 16, 1, 0, 5, 5, 5, 0 },
					{ 0, 5, 5, 5, 0, 0, 0, 0, 0, 5, 5, 5, 0 },
					{ 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 },
					{ 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 },
					{ 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 },
					{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
				},
		{
			//51
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
			{ 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 },
			{ 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 },
			{ 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 },
			{ 0, 5, 5, 5, 5, 0, 0, 0, 5, 5, 5, 5, 0 },
			{ 0, 5, 5, 5, 0, 0, 164, 0, 0, 5, 5, 5, 0 },
			{ 0, 5, 5, 5, 0, 0, 9, 0, 0, 5, 5, 5, 0 },
			{ 0, 5, 5, 5, 0, 0, 4, 0, 0, 5, 5, 5, 0 },
			{ 0, 5, 5, 5, 5, 0, 4, 0, 5, 5, 5, 5, 0 },
			{ 0, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 0 },
			{ 0, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 5, 0 },
			{ 0, 5, 5, 5, 5, 5, 17, 5, 5, 5, 5, 5, 0 },
			{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		}
};

class Monster
{
public:
	Monster() {};
	Monster(int hp, int att, int def, int mon, bool d_cro, bool isDragon);
	Monster(int hp, int att, int def, int money);
	int getHp() { return _HP; }
	int getAttack() { return ATTACK; }
	int getDefend() { return DEFEND; }
	int getMoney() { return MONEY; }
	bool afraid_cross() { return def_cross; }
	bool afraid_dragon_killer() { return dragon; }
	~Monster() {};
private:
	int _HP;
	int ATTACK;
	int DEFEND;
	int MONEY;
	bool def_cross; // 惧怕十字架，兽人，兽人武士，
	bool dragon; // 惧怕屠龙匕，魔龙
	int loss;	// 预计损失生命值， -1为不可攻击， 0为无危险
	
};

Monster::Monster(int hp, int att, int def, int money, bool d_cro, bool isDragon) : _HP(hp), ATTACK(att), DEFEND(def), MONEY(money), def_cross(d_cro), dragon(isDragon){}
Monster::Monster(int hp, int att, int def, int money) :_HP(hp), ATTACK(att), DEFEND(def), MONEY(money) { def_cross = false; }
// 怪物信息
Monster gslime(35, 18, 1, 1);		//绿色史莱姆
Monster rslime(45, 20, 2, 2);		//红色史莱姆
Monster sbat(35, 38, 3, 3);			//小蝙蝠
Monster priwiz(60, 32, 8, 5);		//初级法师
Monster skull(50, 42, 6, 6);		//骷髅人
Monster bskull(22, 52, 12, 8);		//骷髅士兵
Monster	pridefender(50, 48, 22, 12);
Monster kskull(100, 65, 15, 30);	//骷髅队长(boss)
Monster bigsilme(130, 60, 3, 8); //大史莱姆
Monster bigbat(60, 100, 8, 12);  //大蝙蝠
Monster senwiz(100, 95, 30, 8);  //高级法师
Monster orc(260, 85, 5, 22, 1, 0);   //兽人
Monster great_orc(320, 120, 15, 30, 1, 0);   //兽人武士
Monster stone_man(20, 100, 68, 28);   //石头人
Monster vampire(444, 199, 66, 144, 1, 0);	// 吸血鬼
Monster octopus(1200, 180, 20, 100);	// 大乌贼判定
Monster great_wiz(4500, 560, 190, 500);	// 大法师
Monster skwrr(220, 180, 30, 35);
Monster wrr(210, 200, 65, 45);
Monster ghost(320, 140, 20, 30);
Monster meddefender(100, 180, 110, 50);
Monster brisword(100, 680, 50, 55);
Monster dragon(1500, 600, 250, 800, 0, 1);
Monster knight(160, 230, 105, 65);
Monster knightleader(120, 150, 50, 100);
Monster prisor(220, 370, 110, 80); //初级巫师
Monster sensor(200, 380, 130, 90);  //高级巫师
Monster kingslime(360, 310, 20, 40); //史莱姆王
Monster bloodbat(200, 390, 90, 50); //吸血蝙蝠
Monster darkknight(180, 430, 210, 120); //黑暗骑士
Monster magicguard(230, 450, 100, 100); //魔法警卫
Monster senguard(180, 460, 360, 200);   //高级卫兵
Monster fakeboss_1(8000, 5000, 1000, 500);   //假魔王
Monster fakeboss_2(800, 500, 100, 500);   //假魔王
Monster boss(5000, 1580, 100, 500);   //真魔王

// 哈希表存所有怪物信息
unordered_map<int, Monster> Mlist = { {251,gslime}, {252, rslime}, {253, sbat}, {254, priwiz}, {255, skull},
	{256, bskull} ,{257, pridefender}, {258, kskull} ,{259,bigsilme },{260,bigbat }, {261, senwiz},{262, orc },
	{263, great_orc}, {264, stone_man}, {265, vampire}, {291, octopus}, {282, great_wiz}, {266, skwrr}, {267, wrr},
	{268, ghost}, {269, meddefender}, {270, brisword}, {271, knight}, {272, knightleader}, {281, fakeboss_1}, {280, fakeboss_2}, {283, boss},  {300, dragon},{302, prisor},
	{303,sensor}, {304, kingslime}, {305, bloodbat}, {306, darkknight}, {307, magicguard}, {308, senguard} };

int CalculateLoss(Monster m);	// 声明函数

class Warrior
{
public:
	static int highlevel;// 静态变量，储存到达楼层的最高层
	// 构造函数
	Warrior(int cl, int hp, int att, int def, int money, int yk, int bk, int rk, int sword, int shield, int buycount);
	int getLevel() { return Clevel; }
	int getHp() { return _HP; }
	int getAttack() { return ATTACK; }
	int getDefend() { return DEFEND; }
	int getMoney() { return MONEY; }
	int getYellow_Key() { return Yellow_Key; }
	int getBlue_Key() { return Blue_Key; }
	int getRed_Key() { return Red_Key; }
	int getClevel() { return Clevel; }
	int getSword() { return Sword;  }
	int getShield() { return Shield; }
	~Warrior() {}
	void LevelUp() { Clevel ++; }
	void LevelDown() { Clevel--; }
	void Raise_Hp(int hp) { _HP += hp; }
	void Lose_Hp(int hp) { _HP -= hp; }
	void Raise_Attack(int att) { ATTACK += att; }
	void Raise_Defend(int def) { DEFEND += def; }
	void Get_Money(int money) { MONEY += money; }
	void Spend_Money(int money) { MONEY -= money; }
	void Get_Yellow_Key() { Yellow_Key ++; }
	void Get_Blue_Key() { Blue_Key ++; }
	void Get_Red_Key() { Red_Key ++; }
	void Spend_Yellow_Key() { Yellow_Key --; }
	void Spend_Blue_Key() { Blue_Key --; }
	void Spend_Red_Key() { Red_Key --; }
	void HighLevelUp() { highlevel ++; }
	void SetSword(int s) { Sword = s; }
	void SetShield(int s) { Shield = s; }
	int getBuyCount() { return BuyCount; }
	void Buy() { BuyCount++; }
	// void setItems(vector<int> &a) { return ITEMS; }
	bool Fight(Monster m);	// 攻击怪物
private:
	int Clevel;			// 当前楼层
	int _HP;
	int ATTACK;
	int DEFEND;
	int MONEY;
	int Yellow_Key;
	int Blue_Key;
	int Red_Key;			// 红钥匙数量
	// 0~4 表示剑/盾的等级
	int Sword;
	int Shield;
	int BuyCount;
};

Warrior::Warrior(int cl, int hp, int att, int def, int money, int yk, int bk, int rk, int sword, int shield, int buycount) :
	Clevel(cl), _HP(hp), ATTACK(att), DEFEND(def), MONEY(money), Yellow_Key(yk), Blue_Key(bk),
	Red_Key(rk) , Sword(sword), Shield(shield), BuyCount(buycount){}

bool getLuckyCoin = false;	//是否有幸运金币
// 主角信息
int Warrior::highlevel = 1;

Warrior w(1, 1200, 120, 120, 20, 0, 0, 0, 39, 40, 0);

bool Warrior::Fight(Monster m)
{
	int loss = CalculateLoss(m), ID;
	
	if (loss == -1 || w.getHp() <= loss)
	{
		MessageBox(hwnd, _T("打不过！"), _T("提示"), MB_OK);
		return false;
	}
	else
	{
		w.Lose_Hp(loss); 
		if (getLuckyCoin) { w.Get_Money(2 * m.getMoney()); }
		else { w.Get_Money(m.getMoney()); }
		MessageBox(hwnd, _T("战斗胜利！"), _T("提示"), MB_OK);
		return true;
	}
	
}

bool getConvey = false;	//是否得到传送法杖
bool getNotebook = false;//是否获得记事本
bool getCross = false;	//是否得到十字架
bool getAxe = false;	//是否获得破墙稿
bool getHolyWater = false; //是否获得圣水
int getCentred_tp = 0;		// 还剩几个中心对称飞行器
bool getBomb = false;	//是否有炸弹
bool geticemagic = false; //是否有冰冻徽章
bool getflyup = false;	//是否有向上飞行器
bool getflydown = false;	//是否有向下飞行器
bool getearthquake = false; //是否获得地震卷轴
bool getmagickey = false; //是否获得魔法钥匙
bool getdragonkiller = false;	//是否获得屠龙匕

void usemagickey()
{
	if (!getmagickey)	return;
	int ID = MessageBox(hwnd, _T("是否使用魔法钥匙？"), _T("提示"), MB_YESNO);
	if (ID == IDYES)
	{
		for (int i = 1; i < 12; i++)
			for (int j = 1; j < 12; j++)
				if (map[w.getClevel()][i][j] == 6)
					map[w.getClevel()][i][j] = 1;
		getmagickey = false;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 535, _T("K:魔法钥匙 已使用"));
	}
	return;
}

void useearthquake()
{
	if (!getearthquake)	return;
	int ID = MessageBox(hwnd, _T("是否使用地震卷轴？"), _T("提示"), MB_YESNO);
	if (ID == IDYES)
	{
		for (int i = 1; i < 12; i++)
			for (int j = 1; j < 12; j++)
				if (map[w.getClevel()][i][j] == 0 || map[w.getClevel()][i][j] == 3)
					map[w.getClevel()][i][j] = 1;
		getearthquake = false;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 535, _T("E:地震卷轴 已使用"));
	}
	return;
}

void usefly_up()
{
	if (!getflyup) return;
	int ID = MessageBox(hwnd, _T("是否使用向上飞行器？"), _T("提示"), MB_YESNO);
	if (ID == IDYES)
	{
		if (w.getClevel() == 49)
		{
			MessageBox(hwnd, _T("似乎往上飞行到不了50楼！"), _T("提示"), MB_OK);
			return;
		}
		if (w.getClevel() == 50 && map[50][5][6] != 1)
		{
			MessageBox(hwnd, _T("魔王阻止你使用！请先打败它！"), _T("提示"), MB_OK);
			return;
		}
		w.LevelUp();
		getflyup = false;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 515, _T("V:向上飞行 已使用"));
	}
	return;
}

void usefly_down()
{
	int ID = MessageBox(hwnd, _T("是否使用向下飞行器？"), _T("提示"), MB_YESNO);
	if (ID == IDYES)
	{
		if (!getflydown) return;
		w.LevelDown();
		getflydown = false;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 495, _T("M:向下飞行 已使用"));
	}
	return;
}

void useice()
{
	if (!geticemagic)	return;
	int x, y;
	FindRole(x, y);
	if (map[w.getLevel()][x + 1][y] == 4) map[w.getLevel()][x + 1][y] = 1;
	if (map[w.getLevel()][x][y + 1] == 4) map[w.getLevel()][x][y + 1] = 1;
	if (map[w.getLevel()][x - 1][y] == 4) map[w.getLevel()][x - 1][y] = 1;
	if (map[w.getLevel()][x][y - 1] == 4) map[w.getLevel()][x][y - 1] = 1;
}

void useAxe()
{
	if (!getAxe)	return;
	int ID = MessageBox(hwnd, _T("是否使用破墙镐？"), _T("提示"), MB_YESNO);
	if (ID == IDYES)
	{
		int x, y;
		FindRole(x, y);
		if (x < 12 && map[w.getLevel()][x + 1][y] == 0) map[w.getLevel()][x + 1][y] = 1;
		if (y < 12 && map[w.getLevel()][x][y + 1] == 0) map[w.getLevel()][x][y + 1] = 1;
		if (x > 0 && map[w.getLevel()][x - 1][y] == 0) map[w.getLevel()][x - 1][y] = 1;
		if (y > 0 && map[w.getLevel()][x][y - 1] == 0) map[w.getLevel()][x][y - 1] = 1;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 400, _T("T:破墙镐 已使用"));
		getAxe = false;
	}
	return;
}

void useHolyWater()
{
	if (!getHolyWater)	return;
	int ID = MessageBox(hwnd, _T("是否使用圣水？"), _T("提示"), MB_YESNO);
	if (ID == IDYES)
	{
		w.Raise_Hp((w.getAttack() + w.getDefend()) * 20);
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 380, _T("O:圣水  已使用"));
		getAxe = false;
	}
	return;
}

void useCentred_tp()
{
	if (getCentred_tp == 0)	return;
	if (w.getClevel() == 40)
	{
		MessageBox(hwnd, _T("此楼层为禁飞区！"), _T("提示"), MB_YESNO);
		return;
	}
	int ID = MessageBox(hwnd, _T("是否使用中心对称飞行器？"), _T("提示"), MB_YESNO);
	if (ID == IDYES)
	{
		int x, y;
		FindRole(x, y);
		if (map[w.getClevel()][12 - x][12 - y] != 1)
		{
			MessageBox(hwnd, _T("要传送目标区域处不是空地！"), _T("提示"), MB_YESNO);
			return;
		}
		map[w.getClevel()][x][y] = 1;
		map[w.getClevel()][12 - x][12 - y] = 17;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 420, _T("F:中心对称飞行器"));
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 435, _T("剩余:"));
		getCentred_tp --;
		outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 435, trans(getCentred_tp));
	}
	return;
}

void useBomb()
{
	if (!getBomb)	return;
	int ID = MessageBox(hwnd, _T("是否使用炸弹？"), _T("提示"), MB_YESNO);
	if (ID == IDYES)
	{
		int x, y;
		FindRole(x, y);
		if (map[w.getLevel()][x + 1][y] > 250 && map[w.getLevel()][x + 1][y] != 258 && map[w.getLevel()][x + 1][y] != 265
			&& map[w.getLevel()][x + 1][y] != 272 && map[w.getLevel()][x + 1][y] != 300 && map[w.getLevel()][x + 1][y] != 291 
			&& map[w.getLevel()][x + 1][y] != 282 && map[w.getLevel()][x + 1][y] != 281 && map[w.getLevel()][x + 1][y] != 283 
			&& map[w.getLevel()][x + 1][y] != 280) map[w.getLevel()][x + 1][y] = 1;
		if (map[w.getLevel()][x][y + 1] > 250 && map[w.getLevel()][x][y + 1] != 258 && map[w.getLevel()][x ][y + 1] != 265
			&& map[w.getLevel()][x][y + 1] != 272 && map[w.getLevel()][x][y + 1] != 300 && map[w.getLevel()][x][y + 1] != 291
			&& map[w.getLevel()][x][y + 1] != 283 && map[w.getLevel()][x][y + 1] != 280
			&& map[w.getLevel()][x][y + 1] != 281 && map[w.getLevel()][x][y + 1] != 282) map[w.getLevel()][x][y + 1] = 1;
		if (map[w.getLevel()][x - 1][y] > 250 && map[w.getLevel()][x - 1][y] != 258 && map[w.getLevel()][x - 1][y] != 265
			&& map[w.getLevel()][x - 1][y] != 272 && map[w.getLevel()][x - 1][y] != 300 && map[w.getLevel()][x - 1][y] != 291
			&& map[w.getLevel()][x - 1][y] != 283 && map[w.getLevel()][x - 1][y] != 280
			&& map[w.getLevel()][x - 1][y] != 281 && map[w.getLevel()][x - 1][y] != 282) map[w.getLevel()][x - 1][y] = 1;
		if (map[w.getLevel()][x][y - 1] > 250 && map[w.getLevel()][x][y - 1] != 258 && map[w.getLevel()][x][y - 1] != 265
			&& map[w.getLevel()][x][y - 1] != 272 && map[w.getLevel()][x][y - 1] != 300 && map[w.getLevel()][x][y - 1] != 291
			&& map[w.getLevel()][x][y - 1] != 283 && map[w.getLevel()][x][y - 1] != 280
			&& map[w.getLevel()][x][y - 1] != 281 && map[w.getLevel()][x][y - 1] != 282) map[w.getLevel()][x][y - 1] = 1;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 455, _T("N:炸弹 已使用"));
		getBomb = true;
	}
	return;
}

void Convey_Up()	//向上传送
{
	if (!getConvey)	return;
	int x, y;
	FindRole(x, y);
	if (map[w.getLevel()][x + 1][y] == 12 || map[w.getLevel()][x + 1][y] == 11 ||
		map[w.getLevel()][x - 1][y] == 12 || map[w.getLevel()][x - 1][y] == 11 ||
		map[w.getLevel()][x][y + 1] == 12 || map[w.getLevel()][x][y + 1] == 11 ||
		map[w.getLevel()][x][y - 1] == 12 || map[w.getLevel()][x][y - 1] == 11)
	{
		if (w.highlevel == w.getClevel())
			MessageBox(hwnd, _T("您还没去过上层!"), _T("提示"), MB_OK);
		else if (w.getClevel() == 50)
			MessageBox(hwnd, _T("您已到达塔的最高层!"), _T("提示"), MB_OK);
		else if (w.getClevel() == 43)
		{
			w.LevelUp(); w.LevelUp();
		}
		else w.LevelUp();
	}
	else
		MessageBox(hwnd, _T("请在楼梯旁使用！"), _T("提示"), MB_OK);
}
void Convey_Down()	//向下传送
{
	if (!getConvey)	return;
	int x, y;
	FindRole(x, y);
	if (map[w.getLevel()][x + 1][y] == 12 || map[w.getLevel()][x + 1][y] == 11 ||
		map[w.getLevel()][x - 1][y] == 12 || map[w.getLevel()][x - 1][y] == 11 ||
		map[w.getLevel()][x][y + 1] == 12 || map[w.getLevel()][x][y + 1] == 11 ||
		map[w.getLevel()][x][y - 1] == 12 || map[w.getLevel()][x][y - 1] == 11)
	{
		if (w.getClevel() == 1)
			MessageBox(hwnd, _T("您已在塔的最底层!"), _T("提示"), MB_OK);
		else if (w.getClevel() == 45)
		{
			w.LevelDown(); w.LevelDown();
		}
		else w.LevelDown();
	}
	else
		MessageBox(hwnd, _T("请在楼梯旁使用！"), _T("提示"), MB_OK);
}

int money = 20;	// 商店的初始价格，每买一次就涨价

void visitShop()
{
	int HP = 100 * (w.getBuyCount() + 1) * ((w.getLevel() - 1) / 10 + 1);
	
	
	while (1)
	{
		//绘制商店
		solidrectangle(GAP + 180, GAP + 240, GAP + 380, GAP + 385);
		rectangle(GAP + 180, GAP + 240, GAP + 380, GAP + 385);
		outtextxy(GAP + 185, GAP + 245, _T("欢迎来到商店!"));
		outtextxy(GAP + 185, GAP + 265, _T("请选择需求!"));
		outtextxy(GAP + 185, GAP + 285, _T("金币消耗:"));
		outtextxy(GAP + 257, GAP + 285, trans(money));
		outtextxy(GAP + 185, GAP + 305, _T("1.攻击+"));
		outtextxy(GAP + 241, GAP + 305, trans(2 * ((w.getLevel() - 1) / 10) + 2));
		outtextxy(GAP + 185, GAP + 325, _T("2.防御+"));
		outtextxy(GAP + 241, GAP + 325, trans(2 * (2 * ((w.getLevel() - 1) / 10) + 2)));
		outtextxy(GAP + 185, GAP + 345, _T("3.生命+"));
		outtextxy(GAP + 241, GAP + 345, trans(HP));
		outtextxy(GAP + 185, GAP + 365, _T("4.离开商店"));

		con = _getch();

		switch (con)
		{
		case '1':
			if (w.getMoney() >= money)
			{
				w.Spend_Money(money);
				w.Raise_Attack(2 * ((w.getLevel() - 1) / 10) + 2);
				w.Buy();
				money += 20 * w.getBuyCount();
			}
			else
			{
				MessageBox(hwnd, _T("买不起！"), _T("提示"), MB_OK);
			}
			Draw();
			break;
		case '2':
			if (w.getMoney() >= money)
			{
				w.Spend_Money(money);
				w.Raise_Defend(2 * (2 * ((w.getLevel() - 1) / 10) + 2));
				w.Buy();
				money += 20 * w.getBuyCount();
			}
			else
			{
				MessageBox(hwnd, _T("买不起！"), _T("提示"), MB_OK);
			}
			Draw();
			break;
		case '3':
			if (w.getMoney() >= money)
			{
				w.Spend_Money(money);
				w.Raise_Hp(HP);
				w.Buy();
				money += 20 * w.getBuyCount();
			}
			else
			{
				MessageBox(hwnd, _T("买不起！"), _T("提示"), MB_OK);
			}
			Draw();
			break;
		case '4':
			return;
		}
	}
}

bool query94 = false;
void Query94()
{
	mciSendString(_T("close Source/41-49.mp3"), 0, 0, 0);
	mciSendString(_T("open Source/50.mp3"), 0, 0, 0);
	mciSendString(_T("play Source/50.mp3 repeat"), 0, 0, 0);
	MessageBox(hwnd, _T("你怎么会在这里！你到底是谁？？"), _T("勇者"), MB_OK);
	MessageBox(hwnd, _T("我在这里只有一个理由，那就是..."), _T("小偷"), MB_OK);
	Sleep(800);
	map[50][5][6] = 283;
	Sleep(800);
	Draw();
	MessageBox(hwnd, _T("啊！你就是魔王！你怎么还活着？"), _T("勇者"), MB_OK);
	MessageBox(hwnd, _T("我是不会死的。以前我只是在对你的能力做测试而已。"), _T("魔王"), MB_OK);
	MessageBox(hwnd, _T("什么？你这是什么意思？你为什么要做这样的事情？"), _T("勇者"), MB_OK);
	MessageBox(hwnd, _T("神圣剑就是你装备的武器，而智慧权杖是我所装备的武器。先知说过无论谁使用它们都必须要有足够的智慧，且剑只能被真正的战士使用"), _T("魔王"), MB_OK);
	MessageBox(hwnd, _T("如你所说我就是那个真正的战士。"), _T("勇者"), MB_OK);
	MessageBox(hwnd, _T("是的，你是最合适的人选。但你刚来这座塔时，你的能力还不足以支配神圣剑。因此我在塔内安排了各类机关，让你通过战斗知道可以控制神圣剑。"), _T("魔王"), MB_OK);
	MessageBox(hwnd, _T("很好，那么外面传说有一个公主被困在魔塔，就是为了把我骗到这里。是这样的吗？"), _T("勇者"), MB_OK);
	MessageBox(hwnd, _T("是的。现在如果我们能够合作，那么这场闹剧就结束了。"), _T("魔王"), MB_OK);
	MessageBox(hwnd, _T("现在让我们一起用权杖破坏神圣剑，这样伟大的时代就要降临了。"), _T("魔王"), MB_OK);
	MessageBox(hwnd, _T("我不会让你毁了神圣剑，让黑暗降临。"), _T("勇士"), MB_OK);
	Draw();
	query94 = true;
}

bool query95 = false;
void Query95()
{
	MessageBox(hwnd, _T("你好，暗道已挖好，你可用它绕过魔龙。"), _T("小偷"), MB_OK);
	MessageBox(hwnd, _T("我听说骑士队长实力差有又吹牛，所以被魔法警卫们讨厌。"), _T("小偷"), MB_OK);
	MessageBox(hwnd, _T("40楼是禁飞区，你不能在40楼用中心对称飞行器。"), _T("小偷"), MB_OK);
	MessageBox(hwnd, _T("这塔太危险了，我可不想再次被抓，我要离塔回去了，再见。"), _T("小偷"), MB_OK);
	map[35][9][5] = 1;
	query95 = true;
}


void Query96()
{
	MessageBox(hwnd, _T("是你！我刚刚被魔法警卫发现，抓到监狱了。谢谢你救了我，我现在就去三十五楼打开绕过魔龙的暗道。"), _T("小偷"), MB_OK);
	map[2][7][3] = 1;
	map[35][9][5] = 95;
	map[35][9][4] = 1;
}

bool query97 = false;
void Query97()
{
	MessageBox(hwnd, _T("我们终于逃出来了。你的剑盾被警卫拿走了，你必须先找到武器。我知道铁剑在5楼，铁盾在9楼，你最好先取到它们。我现在有事要做没法帮你，再见！"), _T("小偷"), MB_OK);

	map[3][11][2] = 19;
	map[2][9][1] = 1;
	query97 = true;
}

bool query98 = false;
void Query98()
{
	MessageBox(hwnd, _T("嘿，我们又见面了！非常感谢你打败了此区域的头目，我正苦恼于如何到达更高的楼层，现在我终于可以上去了！"), _T("小偷"), MB_OK);
	MessageBox(hwnd, _T("我听说银盾在11楼，银剑在17楼，不知道这消息对你是否有用。"), _T("小偷"), MB_OK);
	map[10][10][6] = 1;
	query98 = true;
}

bool query99 = false;
void Query99()
{
	MessageBox(hwnd, _T("啊哈，你还好吗？"), _T("小偷"), MB_OK);
	MessageBox(hwnd, _T("这大章鱼挡住了我前进的道路，现在暗道终于完工了，你现在最好也躲开他。"), _T("小偷"), MB_OK);
	MessageBox(hwnd, _T("我要走了，再见。"), _T("小偷"), MB_OK);
	map[15][1][8] = 1;
	map[15][1][9] = 1;
	query99 = true;
}

bool query102 = false;
bool Query102() {
	int ID = MessageBox(hwnd, _T("谢谢你救了我，我可以提升你10％的攻击和防御。\n你确定要现在提升吗？"), _T("长者"), MB_YESNO);
	if (ID == IDYES)
	{
		w.Raise_Attack(w.getAttack() * 0.1);
		w.Raise_Defend(w.getDefend() * 0.1);
		query102 = true;
		return true;
	}
	return false;
}

bool query131 = false;
void Query131()
{
	int ID = MessageBox(hwnd, _T("谢谢你救了我，你一定要收下这300金币。"), _T("商人"), MB_OK);
	w.Get_Money(300);
	query131 = true;
}

bool query100 = false;
bool Query100()
{
	bool isOK = true;
	for (int i = 1; i < 12; i++)
	{
		for (int j = 1; j < 12; j++)
		{
			if (map[23][i][j] == 3)
			{
				isOK = false;
				break;
			}
		}
	}
	if (!isOK)
	{
		MessageBox(hwnd, _T("嘿，又见面了！这里的路被堵住了这里的路被堵住了，我正在尝试挖暗道。（若23层暗墙未找齐暗道不开）"), _T("小偷"), MB_OK);
	}
	else
	{
		MessageBox(hwnd, _T("暗道已经完工，我先走一步了，再见。"), _T("小偷"), MB_OK);
		map[29][2][6] = 1;
		map[29][3][6] = 1;
		query100 = true;
	}
	return isOK;
}

bool query103 = false;
void Query103()
{
	MessageBox(hwnd, _T("给你一本怪物手册，上面有你所在楼层所有怪物的属性。\n请按Q键查看。"), _T("长者"), MB_OK);
	query103 = true;
}

bool query104 = false;
void Query104()
{
	MessageBox(hwnd, _T("有些门不能用钥匙打开，只有当你打败它的守卫后才会自动打开。"), _T("长者"), MB_OK);
	query104 = true;
}

bool query105 = false;
void Query105()
{
	MessageBox(hwnd, _T("你购买了礼物后再与商人对话，他会告诉你一些重要的信息。"), _T("长者"), MB_OK);
	query105 = true;
}

// 16层左下长者 106
bool query106 = false;
void Query106()
{
	MessageBox(hwnd, _T("我听说在塔内有2把隐藏的红钥匙。"), _T("长者"), MB_OK);
	query106 = true;
}
bool query107 = false;
void Query107()
{
	MessageBox(hwnd, _T("很好，你居然找到了我。作为奖励，我将给你一瓶圣水。按O键可以使用它。喝了它将按你的攻击和防御的总和，增加你的生命。你越晚用它效果越好"), _T("长者"), MB_OK);
	outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 380, _T("O:圣水  未使用"));
	getHolyWater = true;
	query107 = true;
}
// 18层长者 108
bool query108 = false;
void Query108()
{
	MessageBox(hwnd, _T("在这区域不多次提升攻击力，就不能打败石头人。切记前人教训！"), _T("长者"), MB_OK);
	query108 = true;
}

bool query109 = false;
void Query109()
{
	MessageBox(hwnd, _T("大法师住在25楼，他是这座塔的主人。以你现在的状态去攻击他简直就是自杀。你应当在取得更高级别的道具后再去打败他。"), _T("长者"), MB_OK);
	query109 = true;
}

bool query110 = false;
void Query110()
{
	MessageBox(hwnd, _T("我没有什么可说的，但有一个确切的消息藏在这个楼层里。"), _T("长者"), MB_OK);
	query110 = true;
}

bool query111 = false;
void Query111()
{
	MessageBox(hwnd, _T("如果你到27楼时状态为：生命1500，攻击80，防御98，拥有1蓝钥匙，5黄钥匙。那么祝贺你，你前期是比较成功的。"), _T("长者"), MB_OK);
	query111 = true;
}

bool query112 = false;
void Query112()
{
	MessageBox(hwnd, _T("双手剑士的攻击力太高了，你最好到能对他一击必杀时再与他战斗。"), _T("长者"), MB_OK);
	query112 = true;
}

bool query113 = false;
void Query113()
{
	MessageBox(hwnd, _T("别匆忙，放慢速度。"), _T("长者"), MB_OK);
	query113 = true;
}

bool query114 = false;
void Query114()
{
	MessageBox(hwnd, _T("如果你能用好移动飞行宝物，你不用与强敌作战就能拿到想要的东西。"), _T("长者"), MB_OK);
	query114 = true;
}

bool query115 = false;
void Query115()
{
	MessageBox(hwnd, _T("你需要用地震卷轴取出37楼仓库内的所有宝物。"), _T("长者"), MB_OK);
	query115 = true;
}

bool query116 = false;
void Query116()
{
	MessageBox(hwnd, _T("谜题：“在3点，拥有传送功能的密宝就会出现。”"), _T("长者"), MB_OK);
	query116 = true;
}

bool query117 = false;
void Query117()
{
	MessageBox(hwnd, _T("巫师会用魔法攻击路过的人，在2个魔法警卫间通过会使你的生命减少一半。"), _T("长者"), MB_OK);
	query117 = true;
}

bool query118 = false;
void Query118()
{
	MessageBox(hwnd, _T("44楼被藏在异空间，你只能用密宝才能到达。听说这座塔中有3个异空间。"), _T("长者"), MB_OK);
	query118 = true;
}

bool query119 = false;
void Query119()
{
	MessageBox(hwnd, _T("41楼事实上是左右对称的。"), _T("长者"), MB_OK);
	query119 = true;
}

bool query120 = false;
void Query120()
{
	MessageBox(hwnd, _T("像骰子上5的形状是一种封印魔法，你最好记住它在你与49楼假魔王战斗时有用。"), _T("长者"), MB_OK);
	query120 = true;
}

bool query132 = false;
bool Query132()	// 6楼商人
{
	int ID = MessageBox(hwnd, _T("我有一把蓝钥匙，你出50金币我就卖给你。"), _T("商人"), MB_YESNO);
	if (ID == IDYES)
	{
		if (w.getMoney() >= 50)
		{
			w.Spend_Money(50);
			w.getBlue_Key();
			query132 = true;
			MessageBox(hwnd, _T("这座塔一共50层，每10层为一个区域。如果不打败此区域的头目，就不能到达更高的地方。"), _T("商人"), MB_OK);
			return true;
		}
		else
		{
			MessageBox(hwnd, _T("金币不足！"), _T("提示"), MB_OK);
			return false;
		}
	}
	return false;
}
bool query133 = false;
bool Query133()	
{
	int ID = MessageBox(hwnd, _T("我有五把蓝钥匙，你出50金币我就卖给你"), _T("商人"), MB_YESNO);
	if (ID == IDYES)
	{
		if (w.getMoney() >= 50)
		{
			w.Spend_Money(50);
			w.getYellow_Key();
			w.getYellow_Key();
			w.getYellow_Key();
			w.getYellow_Key();
			w.getYellow_Key();
			query133 = true;
			MessageBox(hwnd, _T("在商店里你最好选择提升防御，只有在攻击力低于敌人的防御力时才提升攻击力。"), _T("商人"), MB_OK);
			return true;
		}
		else
		{
			MessageBox(hwnd, _T("金币不足！"), _T("提示"), MB_OK);
			return false;
		}
	}
	return false;
}

bool query134 = false;
bool Query134()	// 12楼左上商人 134
{
	int ID = MessageBox(hwnd, _T("我有一把红钥匙，你出800金币我就卖给你"), _T("商人"), MB_YESNO);
	if (ID == IDYES)
	{
		if (w.getMoney() >= 800)
		{
			w.Spend_Money(800);
			w.getRed_Key();
			query134 = true;
			MessageBox(hwnd, _T("你是否注意到5，9，14，16，18，36，41楼有的墙与众不同？"), _T("商人"), MB_OK);
			return true;
		}
		else
		{
			MessageBox(hwnd, _T("金币不足！"), _T("提示"), MB_OK);
			return false;
		}
	}
	return false;
}

bool Query135()	// 12楼右上商人 135
{
	int ID = MessageBox(hwnd, _T("我有很多把黄钥匙，你出1000金币我就卖给你一把。"), _T("商人"), MB_YESNO);
	if (ID == IDYES)
	{
		if (w.getMoney() >= 1000)
		{
			w.Spend_Money(1000);
			w.getYellow_Key();
			return true;
		}
		else
		{
			MessageBox(hwnd, _T("金币不足！"), _T("提示"), MB_OK);
			return false;
		}
	}
	return false;
}

bool query136 = false;
bool Query136()	// 15楼商人 136
{
	int ID = MessageBox(hwnd, _T("我有一把蓝钥匙，你出200金币我就卖给你。"), _T("商人"), MB_YESNO);
	if (ID == IDYES)
	{
		if (w.getMoney() >= 200)
		{
			w.Spend_Money(200);
			w.getBlue_Key();
			query136 = true;
			MessageBox(hwnd, _T("如果你持有十字架，面对兽人和吸血鬼时你的攻击力加倍。在没有十字架的情况下你不可能打败吸血鬼。十字架被藏在高于15楼的墙内。"), _T("商人"), MB_OK);
			return true;
		}
		else
		{
			MessageBox(hwnd, _T("金币不足！"), _T("提示"), MB_OK);
			return false;
		}
	}
	return false;
}

bool Query137()	
{
	int ID = MessageBox(hwnd, _T("我按100金币一把的价格回收黄钥匙，你愿意出售吗"), _T("商人"), MB_YESNO);
	if (ID == IDYES)
	{
		if (w.getYellow_Key() > 0)
		{
			w.Get_Money(100);
			w.Spend_Yellow_Key();
			return true;
		}
		else
		{
			MessageBox(hwnd, _T("黄钥匙不足！"), _T("提示"), MB_OK);
			return false;
		}
	}
	return false;
}

bool query138 = false;
bool Query138()	// 15楼商人 136
{
	int ID = MessageBox(hwnd, _T("我有4把黄钥匙，1把蓝钥匙，你出1000金币我就卖给你。"), _T("商人"), MB_YESNO);
	if (ID == IDYES)
	{
		if (w.getMoney() >= 1000)
		{
			w.Spend_Money(1000);
			w.getBlue_Key();
			w.getYellow_Key();
			w.getYellow_Key();
			w.getYellow_Key();
			w.getYellow_Key();
			query138 = true;
			MessageBox(hwnd, _T("这座塔有50层高，但似乎你不能直接到50楼。"), _T("商人"), MB_OK);
			return true;
		}
		else
		{
			MessageBox(hwnd, _T("金币不足！"), _T("提示"), MB_OK);
			return false;
		}
	}
	return false;
}

bool query139 = false;
bool Query139()	// 15楼商人 136
{
	int ID = MessageBox(hwnd, _T("我有3把黄钥匙，你出200金币我就卖给你。"), _T("商人"), MB_YESNO);
	if (ID == IDYES)
	{
		if (w.getMoney() >= 200)
		{
			w.Spend_Money(200);
			w.getYellow_Key();
			w.getYellow_Key();
			w.getYellow_Key();
			query139 = true;
			MessageBox(hwnd, _T("卫兵系的怪物一定是守着机关门的，而且每个机关门在对应的层都有守门人，所以说……"), _T("商人"), MB_OK);
			return true;
		}
		else
		{
			MessageBox(hwnd, _T("金币不足！"), _T("提示"), MB_OK);
			return false;
		}
	}
	return false;
}

bool query140 = false;
bool Query140()	// 15楼商人 136
{
	int ID = MessageBox(hwnd, _T("我有3把蓝钥匙，你出2000金币我就卖给你。"), _T("商人"), MB_YESNO);
	if (ID == IDYES)
	{
		if (w.getMoney() >= 2000)
		{
			w.Spend_Money(2000);
			w.getBlue_Key();
			w.getBlue_Key();
			w.getBlue_Key();
			query140 = true;
			MessageBox(hwnd, _T("塔内有个幸运金币。拥有它在打败敌人后能获得2倍的金钱。"), _T("商人"), MB_OK);
			return true;
		}
		else
		{
			MessageBox(hwnd, _T("金币不足！"), _T("提示"), MB_OK);
			return false;
		}
	}
	return false;
}
bool query141 = false;
bool Query141()	
{
	int ID = MessageBox(hwnd, _T("给我1000金币，我就提升你的生命2000点。"), _T("商人"), MB_YESNO);
	if (ID == IDYES)
	{
		if (w.getMoney() >= 1000)
		{
			w.Spend_Money(1000);
			w.Raise_Hp(2000);
			query141 = true;
			MessageBox(hwnd, _T("神圣盾能防御魔法攻击，但它被藏在异空间的楼层内。"), _T("商人"), MB_OK);
			return true;
		}
		else
		{
			MessageBox(hwnd, _T("金币不足！"), _T("提示"), MB_OK);
			return false;
		}
	}
	return false;
}

bool query142 = false;
bool Query142()
{
	int ID = MessageBox(hwnd, _T("给我4000金币，我就给你地震卷轴。"), _T("商人"), MB_YESNO);
	if (ID == IDYES)
	{
		if (w.getMoney() >= 4000)
		{
			w.Spend_Money(4000);
			getearthquake = true;
			MessageBox(hwnd, _T("获得地震卷轴！（按E键使用，可破坏一层楼中所有的墙）。"), _T("商人"), MB_OK);
			query142 = true;
			outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 535, _T("E:地震卷轴 未使用"));
			MessageBox(hwnd, _T("如果要打败魔龙你需要圣剑、圣盾、屠龙匕或更高等级的装备。"), _T("商人"), MB_OK);
			return true;
		}
		else
		{
			MessageBox(hwnd, _T("金币不足！"), _T("提示"), MB_OK);
			return false;
		}
	}
	return false;
}

void Query163()
{
	MessageBox(hwnd, _T("时间到了，你已被命运选中。如果你不怕死亡，你最终将通过时空来到我这里。"), _T("广播声"), MB_OK);
	MessageBox(hwnd, _T("什么？这只是个洋娃娃！"), _T("勇士"), MB_OK);
	map[24][1][5] = 0;
	map[24][1][6] = 5;
	map[24][1][7] = 0;
	map[24][2][6] = 1;
	map[24][3][6] = 1;
	map[24][4][6] = 1;
}

void Query164()
{
	MessageBox(hwnd, _T("你..是谁.."), _T("公主"), MB_OK);
	MessageBox(hwnd, _T("我听说你被囚禁在这座塔中，就前来救你了。"), _T("勇士"), MB_OK);
	MessageBox(hwnd, _T("那也没有用了..魔王一定会发现我们...我被关了十几年..听说有很多勇士前来救我...可都败给了魔王.."), _T("公主"), MB_OK);
	MessageBox(hwnd, _T("魔王已经被打败了"), _T("勇士"), MB_OK);
	MessageBox(hwnd, _T("这是..真的吗？！那真是太好了。"), _T("公主"), MB_OK);
	MessageBox(hwnd, _T("只是..我还有个请求.."), _T("公主"), MB_OK);
	MessageBox(hwnd, _T("什么请求？"), _T("勇士"), MB_OK);
	MessageBox(hwnd, _T("请你..不要摧毁这座塔.."), _T("公主"), MB_OK);
	MessageBox(hwnd, _T("这座塔是我们魔法族的归宿，它的主人大法师原本是我们魔法族的领袖..可是魔王的到来改变了一切"), _T("公主"), MB_OK);
	MessageBox(hwnd, _T("魔王暗算了大法师，吸取了他的力量，大法师也不得不为魔王效力，帮助他征服世界.."), _T("公主"), MB_OK);
	MessageBox(hwnd, _T("现在这座塔上的邪恶势力想必已经消退，就让我带领魔法族的人们来净化它吧！"), _T("公主"), MB_OK);
	MessageBox(hwnd, _T("原来如此，想必对于你，已经很了解这座塔了。"), _T("勇士"), MB_OK);
	MessageBox(hwnd, _T("我们先离开这座塔，我来清除怪物的残党，你再净化它。"), _T("勇士"), MB_OK);
	MessageBox(hwnd, _T("我就知道这一天会来临，真是感激不尽！"), _T("公主"), MB_OK);
	Eventfinal2();
}

// 事件1，勇者来到第三层时被魔王关进监狱
bool e1 = false;	// e1是否发生
void Event1()
{
	map[3][7][5] = 283;
	Draw();
	Sleep(1000);
	MessageBox(hwnd, _T("欢迎来到这里！你是第100位挑战者\n你若能打败我所有的手下，我就与你一对一的决斗。\n现在你必须接受我的安排！"), _T("魔王"), MB_OK);
	MessageBox(hwnd, _T("什么？"), _T("勇士"), MB_OK);
	map[3][9][6] = 307;
	map[3][8][5] = 307;
	map[3][10][5] = 307;
	map[3][9][4] = 307;
	Draw();
	
	Sleep(1000);
	map[3][9][6] = 1;
	map[3][8][5] = 1;
	map[3][10][5] = 1;
	map[3][9][4] = 1;
	map[3][7][5] = 1;
	map[3][9][5] = 1;
	
	w.Raise_Attack(-100);
	w.Raise_Defend(-100);
	w.Lose_Hp(500);
	w.SetSword(0);
	w.SetShield(0);
	w.LevelDown();
	map[2][8][3] = 16;
	map[2][10][1] = 1;
	map[2][2][1] = 1;
	
	solidrectangle(GAP, GAP, GAP + NUM * SIZE, GAP + NUM * SIZE);
	rectangle(GAP, GAP, GAP + NUM * SIZE, GAP + NUM * SIZE);

	MessageBox(hwnd, _T("啊！！！"), _T("一阵晕厥"), MB_OK);
	
	Sleep(1000);
	MessageBox(hwnd, _T("喂，醒醒！"), _T("一阵声音"), MB_OK);
	Draw();
	
	solidrectangle(GAP * 2 + SIZE * NUM + 82, GAP + 350, GAP * 2 + SIZE * NUM + 130, GAP + 366);
	solidrectangle(GAP * 2 + SIZE * NUM + 82, GAP + 375, GAP * 2 + SIZE * NUM + 130, GAP + 391);
	
	MessageBox(hwnd, _T("你清醒了吗？你到监狱时还处在昏迷中，魔法警卫把你扔到了我这个房间。但你很幸运，我刚完成逃跑的暗道你就醒了，我们一起越狱吧！"), _T("小偷"), MB_OK);
	map[2][9][1] = 97;
	map[2][7][3] = 1;
	map[2][7][2] = 1;
	
	e1 = true;
}

// 事件2,2层守卫被打败后铁门打开
bool e2 = false;	
void Event2() {
	MessageBox(hwnd, _T("铁门已打开！"), _T("提示"), MB_OK);
	map[2][5][5] = 1;
	map[2][8][5] = 1;
	map[2][11][5] = 1;
	map[2][5][9] = 1;
	map[2][8][9] = 1;
	map[2][11][9] = 1;
	e2 = true;
}

bool e3 = false;
void Event3() {
	MessageBox(hwnd, _T("机关门已打开！"), _T("提示"), MB_OK);
	map[8][4][10] = 1;
	e3 = true;
}

bool e4 = false;
void Event4()
{
	MessageBox(hwnd, _T("机关门已打开！"), _T("提示"), MB_OK);
	map[11][4][2] = 1;
	e4 = true;
}

//打败14楼右上角三个兽人武士，获得一把红钥匙
bool e6 = false;
void Event6()
{
	map[14][3][1] = 23;
	e6 = true;
}

//15楼大章鱼打败后触发
bool e7 = false;
void Event7()
{
	map[15][4][5] = 1;
	map[15][4][6] = 1;
	map[15][4][7] = 1;
	map[15][5][5] = 1;
	map[15][5][6] = 44;
	map[15][5][7] = 1;
	map[15][6][5] = 1;
	map[15][3][6] = 1;
	map[15][6][7] = 1;
	MessageBox(hwnd, _T("机关门已打开！"), _T("提示"), MB_OK);
	e7 = true;
}

bool e8 = false;
void Event8()
{
	map[12][1][11] = 135;
	e8 = true;
}

//17楼左下两个守卫
bool e9 = false;
void Event9()
{
	map[17][7][2] = 1;
	MessageBox(hwnd, _T("机关门已打开！"), _T("提示"), MB_OK);
	e9 = true;
}
//17楼左上两个守卫
bool e10 = false;
void Event10()
{
	map[17][4][2] = 1;
	MessageBox(hwnd, _T("机关门已打开！"), _T("提示"), MB_OK);
	e10 = true;
}
//17楼右下两个守卫
bool e11 = false;
void Event11()
{
	map[17][7][10] = 1;
	MessageBox(hwnd, _T("机关门已打开！"), _T("提示"), MB_OK);
	e11 = true;
}
//17楼右上两个守卫
bool e12 = false;
void Event12()
{
	map[17][4][10] = 1;
	MessageBox(hwnd, _T("机关门已打开！"), _T("提示"), MB_OK);
	e12 = true;
}

// 16楼右下老者
bool e13 = false;
void Event13()
{
	map[16][11][11] = 107;
	e13 = true;
}

bool e14 = false;
void Event14()
{
	map[19][3][6] = 43;
	e14 = true;
}
bool e15_1 = false;
void Event15_1()
{
	MessageBox(hwnd, _T("杀-死-入-侵-者"), _T("提示"), MB_OK);
	e15_1 = true;
}
bool e15_2 = false;
void Event15_2()
{
	map[25][8][4] = 23;
	map[25][8][5] = 23;
	map[25][8][7] = 23;
	map[25][8][8] = 23;
	e15_2 = true;
}
bool e16 = false;
void Event16()
{
	map[30][4][6] = 1;
	Draw();
	MessageBox(hwnd, _T("什么人？来人给我把他抓起来！"), _T("楼上传来的声音"), MB_OK);
	map[2][11][10] = 96;
	map[2][7][2] = 0;
	mciSendString(_T("close Source/21-30.mp3"), 0, 0, 0);
	mciSendString(_T("open Source/31-40.mp3"), 0, 0, 0);
	mciSendString(_T("play Source/31-40.mp3 repeat"), 0, 0, 0);
	e16 = true;
}

bool e17 = false;
void Event17()
{
	map[10][10][6] = 98;
	e17 = true;
}

bool e18 = false;
void Event18()
{
	map[32][9][2] = 1;
	e18 = true;
}

bool e19 = false;
void Event19()
{
	map[33][4][10] = 10;
	map[33][8][10] = 10;
	Draw();
	MessageBox(hwnd, _T("有埋伏！！"), _T("提示"), MB_OK);
	e19 = true;
}

bool e20 = false;
void Event20()
{
	map[33][4][10] = 1;
	map[33][8][10] = 1;
	MessageBox(hwnd, _T("机关门已打开！"), _T("提示"), MB_OK);
	e20 = true;
}

bool e21 = false;
void Event21()
{
	map[34][5][1] = 21;
	map[34][7][1] = 21;
	map[34][5][3] = 21;
	map[34][7][3] = 21;
	map[34][6][2] = 23;
	e21 = true;
}

bool e22 = false;
void Event22()
{
	map[38][9][2] = 1;
	MessageBox(hwnd, _T("机关门已打开！"), _T("提示"), MB_OK);
	e22 = true;
}

bool e23 = false;
void Event23()
{
	map[38][5][2] = 3;
	MessageBox(hwnd, _T("是陷阱！"), _T("提示"), MB_OK);
	e23 = true;
}

bool e24 = false;
void Event24()
{
	map[39][4][4] = 46;
	e24 = true;
}

bool e25 = false;
void Event25()
{
	map[32][1][10] = 272;
	Draw();
	Sleep(100);
	map[32][1][10] = 1;
	map[32][1][9] = 272;
	Draw();
	Sleep(100);
	map[32][1][9] = 1;
	map[32][1][8] = 272;
	Draw();
	Sleep(100);
	map[32][1][8] = 1;
	map[32][1][7] = 272;
	Draw();
	Sleep(100);
	map[32][1][7] = 1;
	map[32][1][6] = 272;
	Draw();
	Sleep(100);
	MessageBox(hwnd, _T("你打败了前两个区域的头目，这表明你是个勇士。但现在游戏结束了，我将在这里亲手杀死你！"), _T("骑士队长"), MB_OK);
	map[32][1][6] = 1;
	map[32][2][6] = 272;
	Draw();
	Sleep(100);
	map[32][2][6] = 1;
	map[32][3][6] = 272;
	Draw();
	Sleep(100);
	map[32][3][6] = 1;
	map[32][4][6] = 272;
	Draw();
	Sleep(100);
	map[32][4][6] = 1;
	map[32][5][6] = 272;
	Draw();
	Sleep(100);
	map[32][5][6] = 1;
	map[32][6][6] = 272;
	Draw();
	Sleep(100);
	map[32][6][6] = 1;
	map[32][7][6] = 272;
	Draw();
	Sleep(100);
	map[32][7][6] = 1;
	map[32][8][6] = 272;
	Draw();
	Sleep(100);
	map[32][8][6] = 1;
	map[32][9][6] = 272;
	Draw();
	Sleep(100);
	if (knightleader.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((knightleader.getAttack() - w.getDefend()));
	w.Lose_Hp(CalculateLoss(knightleader));
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
	else
	{
		MessageBox(hwnd, _T("你以为你已经非常强大了吗？嘿嘿错了，只是我今天状态不佳而已。我走了，有本事到40楼再与我打一次。"), _T("提示"), MB_OK);
		map[32][8][6] = 272;
		map[32][9][6] = 1;
		Draw();
		Sleep(80);
		map[32][8][6] = 1;
		map[32][7][6] = 272;
		Draw();
		Sleep(80);
		map[32][7][6] = 1;
		map[32][6][6] = 272;
		Draw();
		Sleep(80);
		map[32][6][6] = 1;
		map[32][5][6] = 272;
		Draw();
		Sleep(80);
		map[32][5][6] = 1;
		map[32][4][6] = 272;
		Draw();
		Sleep(80);
		map[32][4][6] = 1;
		map[32][3][6] = 272;
		Draw();
		Sleep(80);
		map[32][3][6] = 1;
		map[32][2][6] = 272;
		Draw();
		Sleep(80);
		map[32][2][6] = 1;
		map[32][1][6] = 272;
		Draw();
		Sleep(80);
		map[32][1][6] = 1;
		map[32][1][7] = 272;
		Draw();
		Sleep(80);
		map[32][1][7] = 1;
		map[32][1][8] = 272;
		Draw();
		Sleep(80);
		map[32][1][8] = 1;
		map[32][1][9] = 272;
		Draw();
		Sleep(80);
		map[32][1][9] = 1;
		map[32][1][10] = 272;
		Draw();
		Sleep(80);
		map[32][1][10] = 1;
	}
	e25 = true;
}

bool e26 = false;
void Event26()
{
	map[35][3][6] = 1;
	map[35][5][5] = 27;
	map[35][5][6] = 27;
	map[35][5][7] = 27;
	map[35][6][5] = 1;
	map[35][6][6] = 48;
	map[35][6][7] = 1;
	map[35][7][5] = 1;
	map[35][7][6] = 1;
	map[35][7][7] = 1;
	e26 = true;
}

bool e27 = false;
void Event27()
{
	Draw();
	MessageBox(hwnd, _T("啊！又是你！！（转身逃跑）"), _T("骑士队长"), MB_OK);
	map[42][10][6] = 1;
	map[42][9][6] = 272;
	Draw();
	Sleep(100);
	map[42][9][6] = 1;
	map[42][8][6] = 272;
	Draw();
	Sleep(100);
	map[42][6][6] = 283;
	Draw();
	Sleep(200);
	MessageBox(hwnd, _T("你敢临阵脱逃！"), _T("魔王"), MB_OK);
	MessageBox(hwnd, _T("哦！大王，我打不过这个勇士，不得不逃，饶了我吧！"), _T("骑士队长"), MB_OK);
	MessageBox(hwnd, _T("你说什么？你再敢说一次！你像个胆小鬼一样逃离你负责的区域，并说出那样的话。这座塔不需要像你这样的败类，来人给我杀了！"), _T("魔王"), MB_OK);
	map[42][7][6] = 307;
	map[42][8][5] = 307;
	map[42][8][7] = 307;
	map[42][9][6] = 307;
	MessageBox(hwnd, _T("大王，饶了我吧，再给我一次机会啊。。"), _T("骑士队长"), MB_OK);
	Draw();
	Sleep(400);
	map[42][8][6] = 1;
	Draw();
	Sleep(400);
	MessageBox(hwnd, _T("虽然我刚刚态度异常，但别担心，在决斗时，我不会像刚才这个无用的家伙一样让手下一拥而上。我期待着与你的决斗。"), _T("魔王"), MB_OK);
	map[42][6][6] = 1;
	map[42][7][6] = 1;
	map[42][8][5] = 1;
	map[42][8][7] = 1;
	map[42][9][6] = 1;
	e27 = true;
}

bool e28 = false;
void Event28()
{
	map[41][2][10] = 2;
	e28 = true;
}

bool e29 = false;
void Event29()
{
	map[41][2][10] = 303;
	e29 = true;
}

bool e30 = false;
void Event30()
{
	map[41][5][6] = 49;
	map[41][6][5] = 0;
	map[41][6][6] = 0;
	map[41][4][4] = 2;
	map[41][4][8] = 2;
	map[41][6][7] = 0;
	map[41][7][5] = 1;
	map[41][7][7] = 1;
	e30 = true;
}

bool e31 = false;
void Event31()
{
	map[44][8][6] = 1;
	e31 = true;
}

bool e32 = false;
void Event32()
{
	map[45][10][4] = 1;
	e32 = true;
}

bool e33 = false;
void Event33()
{
	map[45][10][7] = 1;
	e33 = true;
}

bool e34 = false;
void Event34()
{
	map[48][8][8] = 1;
	MessageBox(hwnd, _T("机关门已打开！"), _T("提示"), MB_OK);
	e34 = true;
}

bool e35 = false;
void Event35()
{
	map[49][9][6] = 1;
	MessageBox(hwnd, _T("机关门已打开！"), _T("提示"), MB_OK);
	e35 = true;
}

bool e36 = false;
void Event36()
{
	map[49][7][6] = 1;
	MessageBox(hwnd, _T("机关门已打开！"), _T("提示"), MB_OK);
	e36 = true;
}

bool e37 = false;
void Event37()
{
	mciSendString(_T("close Source/50.mp3"), 0, 0, 0);
	mciSendString(_T("open Source/51.mp3"), 0, 0, 0);
	mciSendString(_T("play Source/51.mp3 repeat"), 0, 0, 0);
	e37 = true;
}

bool boss_event1_1 = false;
void bossEvent1_1()
{
	
	map[10][7][6] = 10;
	Draw();
	MessageBox(hwnd, _T("(咔一声)糟了，这块地砖是机关！"), _T("提示"), MB_OK);
	MessageBox(hwnd, _T("哈哈哈，你是如此幸运的能到达这里。\n但现在好运离你而去了，你中埋伏了！弟兄们给我上！"), _T("骷髅队长"), MB_OK);
	map[10][4][6] = 1;
	map[10][3][6] = 258;
	Draw();
	Sleep(100);
	map[10][3][6] = 1;
	map[10][2][6] = 258;
	Draw();
	Sleep(100);
	map[10][2][6] = 1;
	map[10][1][6] = 258;
	Draw();
	Sleep(100);
	map[10][3][6] = 10;
	map[10][4][6] = 256;
	map[10][6][6] = 256;
	map[10][4][5] = 255;
	map[10][4][7] = 255;
	map[10][5][5] = 255;
	map[10][5][7] = 255;
	map[10][6][5] = 255;
	map[10][6][7] = 255;
	map[10][3][1] = 1;
	map[10][3][2] = 1;
	map[10][3][3] = 1;
	map[10][4][1] = 1;
	map[10][4][2] = 1;
	map[10][4][3] = 1;
	map[10][3][9] = 1;
	map[10][3][10] = 1;
	map[10][3][11] = 1;
	map[10][4][9] = 1;
	map[10][4][10] = 1;
	map[10][4][11] = 1;
	boss_event1_1 = true;
}
bool boss_event1_2 = false;
void bossEvent1_2()
{
	map[10][3][6] = 1;
	Draw();
	MessageBox(hwnd, _T("再踩一下机关，一扇门打开了"), _T("提示"), MB_OK);
	MessageBox(hwnd, _T("你怎能杀出重围？我是绝不会让你通过的，来吧，我要与你决斗！"), _T("骷髅队长"), MB_OK);
	boss_event1_2 = true;
}
bool boss_event1_3 = false;
void bossEvent1_3()
{
	MessageBox(hwnd, _T("不，这是不可能的，你怎会打败我！\n你别太得意，后面还有更多强大的对手和机关存在，你稍有疏忽就必死无疑！"), _T("骷髅队长"), MB_OK);
	map[10][3][1] = 24;
	map[10][3][2] = 24;
	map[10][3][3] = 24;
	map[10][4][1] = 27;
	map[10][4][2] = 27;
	map[10][4][3] = 27;
	map[10][3][9] = 25;
	map[10][3][10] = 25;
	map[10][3][11] = 25;
	map[10][4][9] = 26;
	map[10][4][10] = 26;
	map[10][4][11] = 26;
	map[10][11][6] = 11;
	map[10][4][4] = 1;
	map[10][7][6] = 1;
	map[10][4][8] = 1;
	mciSendString(_T("close Source/0-10.mp3"), 0, 0, 0);
	mciSendString(_T("open Source/11-20.mp3"), 0, 0, 0);
	mciSendString(_T("play Source/11-20.mp3 repeat"), 0, 0, 0);
	boss_event1_3 = true;
}

bool bossevent2_1 = false;
void bossEvent2_1()
{
	map[20][9][6] = 10;
	Draw();
	MessageBox(hwnd, _T("眼前的八只蝙蝠扭在一起...机关门突然启动！"), _T("提示"), MB_OK);
	map[20][6][6] = 265;
	MessageBox(hwnd, _T("吸血鬼出现了！"), _T("提示"), MB_OK);
	map[20][5][5] = 1;
	map[20][5][6] = 1;
	map[20][5][7] = 1;
	map[20][6][5] = 1;
	map[20][6][7] = 1;
	map[20][7][5] = 1;
	map[20][7][6] = 1;
	map[20][7][7] = 1;
	Draw();
	MessageBox(hwnd, _T("很好！"), _T("吸血鬼"), MB_OK);
	MessageBox(hwnd, _T("你打败了骷髅族，但别想像骷髅人那样藐视我。我对你来说就像是神一样，是不可战胜的。呵呵，来吧！"), _T("吸血鬼"), MB_OK);
	bossevent2_1 = true;
}

bool bossevent2_2 = false;
void bossEvent2_2()
{
	MessageBox(hwnd, _T("上帝啊！我做梦也没想到我会被别人打败。毫无疑问你是比我强。但以你现在的状态对于大法师来说又太弱了，你仅仅取得了一个暂时的胜利。"), _T("吸血鬼"), MB_OK);
	map[20][4][5] = 21;
	map[20][4][6] = 21;
	map[20][4][7] = 21;
	map[20][5][4] = 24;
	map[20][6][4] = 24;
	map[20][7][4] = 24;
	map[20][5][8] = 25;
	map[20][6][8] = 25;
	map[20][7][8] = 25;
	map[20][8][5] = 27;
	map[20][8][6] = 27;
	map[20][8][7] = 27;
	map[20][3][6] = 1;
	map[20][9][6] = 1;
	mciSendString(_T("close Source/11-20.mp3"), 0, 0, 0);
	mciSendString(_T("open Source/21-30.mp3"), 0, 0, 0);
	mciSendString(_T("play Source/21-30.mp3 repeat"), 0, 0, 0);
	bossevent2_2 = true;
}

bool bossevent3 = false;
void bossEvent3()
{
	bool e = false;		// 避免重复计算伤害
	bossevent3 = true;
	map[40][8][6] = 10;
	Draw();
	MessageBox(hwnd, _T("我还担心你不能来了。我确信这次我一定能杀了你。"), _T("骑士队长"), MB_OK);
	MessageBox(hwnd, _T("怪物速度太快了，他们一定是先手攻击！我可能要承受更多伤害了。。"), _T("勇士"), MB_OK);
	MessageBox(hwnd, _T("鬼战士给我上！"), _T("骑士队长"), MB_OK);
	map[40][4][5] = 1;
	map[40][4][6] = 266;
	Draw();
	Sleep(100);
	map[40][4][6] = 1;
	map[40][5][6] = 266;
	Draw();
	Sleep(100);
	map[40][5][6] = 1;
	map[40][6][6] = 266;
	Draw();
	Sleep(100);
	if (skwrr.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((skwrr.getAttack() - w.getDefend()));
	w.Fight(skwrr);
	map[40][6][6] = 1;
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
	Draw();
	map[40][4][4] = 1;
	map[40][4][5] = 266;
	Draw();
	Sleep(100);
	map[40][4][5] = 1;
	map[40][4][6] = 266;
	Draw();
	Sleep(100);
	map[40][4][6] = 1;
	map[40][5][6] = 266;
	Draw();
	Sleep(100);
	map[40][5][6] = 1;
	map[40][6][6] = 266;
	Draw();
	Sleep(100);
	if (skwrr.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((skwrr.getAttack() - w.getDefend()));
	w.Fight(skwrr);
	map[40][6][6] = 1;
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
	Draw();
	map[40][4][3] = 1;
	map[40][4][4] = 266;
	Draw();
	Sleep(100);
	map[40][4][4] = 1;
	map[40][4][5] = 266;
	Draw();
	Sleep(100);
	map[40][4][5] = 1;
	map[40][4][6] = 266;
	Draw();
	Sleep(100);
	map[40][4][6] = 1;
	map[40][5][6] = 266;
	Draw();
	Sleep(100);
	map[40][5][6] = 1;
	map[40][6][6] = 266;
	Draw();
	Sleep(100);
	if (skwrr.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((skwrr.getAttack() - w.getDefend()));
	w.Fight(skwrr);
	map[40][6][6] = 1;
	Draw();
	MessageBox(hwnd, _T("战士们，给我上！"), _T("骑士队长"), MB_OK);
	map[40][4][7] = 1;
	map[40][4][6] = 267;
	Draw();
	Sleep(100);
	map[40][4][6] = 1;
	map[40][5][6] = 267;
	Draw();
	Sleep(100);
	map[40][5][6] = 1;
	map[40][6][6] = 267;
	Draw();
	Sleep(100);
	if (wrr.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((wrr.getAttack() - w.getDefend()));
	w.Fight(wrr);
	map[40][6][6] = 1;
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
	Draw();
	map[40][4][8] = 1;
	map[40][4][7] = 267;
	Draw();
	Sleep(100);
	map[40][4][7] = 1;
	map[40][4][6] = 267;
	Draw();
	Sleep(100);
	map[40][4][6] = 1;
	map[40][5][6] = 267;
	Draw();
	Sleep(100);
	map[40][5][6] = 1;
	map[40][6][6] = 267;
	Draw();
	Sleep(100);
	if (wrr.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((wrr.getAttack() - w.getDefend()));
	w.Fight(wrr);
	map[40][6][6] = 1;
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
	Draw();
	map[40][4][9] = 1;
	map[40][4][8] = 267;
	Draw();
	Sleep(100);
	map[40][4][8] = 1;
	map[40][4][7] = 267;
	Draw();
	Sleep(100);
	map[40][4][7] = 1;
	map[40][4][6] = 267;
	Draw();
	Sleep(100);
	map[40][4][6] = 1;
	map[40][5][6] = 267;
	Draw();
	Sleep(100);
	map[40][5][6] = 1;
	map[40][6][6] = 267;
	Draw();
	Sleep(100);
	if (wrr.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((wrr.getAttack() - w.getDefend()));
	w.Fight(wrr);
	map[40][6][6] = 1;
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
	Draw();
	MessageBox(hwnd, _T("真正的战斗才刚刚开始，让我们继续，双手剑士给我上！"), _T("骑士队长"), MB_OK);
	map[40][2][4] = 1;
	map[40][2][5] = 270;
	Draw();
	Sleep(80);
	map[40][2][5] = 1;
	map[40][2][6] = 270;
	Draw();
	Sleep(80);
	map[40][2][6] = 1;
	map[40][3][6] = 270;
	Draw();
	Sleep(80);
	map[40][3][6] = 1;
	map[40][4][6] = 270;
	Draw();
	Sleep(80);
	map[40][4][6] = 1;
	map[40][5][6] = 270;
	Draw();
	Sleep(80);
	map[40][5][6] = 1;
	map[40][6][6] = 270;
	Draw();
	Sleep(80);
	if (brisword.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((brisword.getAttack() - w.getDefend()));
	w.Fight(brisword);
	map[40][6][6] = 1;
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
	Draw();
	map[40][2][3] = 1;
	map[40][2][4] = 270;
	Draw();
	map[40][2][4] = 1;
	map[40][2][5] = 270;
	Draw();
	Sleep(80);
	map[40][2][5] = 1;
	map[40][2][6] = 270;
	Draw();
	Sleep(80);
	map[40][2][6] = 1;
	map[40][3][6] = 270;
	Draw();
	Sleep(80);
	map[40][3][6] = 1;
	map[40][4][6] = 270;
	Draw();
	Sleep(80);
	map[40][4][6] = 1;
	map[40][5][6] = 270;
	Draw();
	Sleep(80);
	map[40][5][6] = 1;
	map[40][6][6] = 270;
	Draw();
	Sleep(80);
	if (brisword.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((brisword.getAttack() - w.getDefend()));
	w.Fight(brisword);
	map[40][6][6] = 1;
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
	Draw();
	map[40][2][2] = 1;
	map[40][2][3] = 270;
	Draw();
	Sleep(80);
	map[40][2][3] = 1;
	map[40][2][4] = 270;
	Draw();
	Sleep(80);
	map[40][2][4] = 1;
	map[40][2][5] = 270;
	Draw();
	Sleep(80);
	map[40][2][5] = 1;
	map[40][2][6] = 270;
	Draw();
	Sleep(80);
	map[40][2][6] = 1;
	map[40][3][6] = 270;
	Draw();
	Sleep(80);
	map[40][3][6] = 1;
	map[40][4][6] = 270;
	Draw();
	Sleep(80);
	map[40][4][6] = 1;
	map[40][5][6] = 270;
	Draw();
	Sleep(80);
	map[40][5][6] = 1;
	map[40][6][6] = 270;
	Draw();
	Sleep(80);
	if (brisword.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((brisword.getAttack() - w.getDefend()));
	w.Fight(brisword);
	map[40][6][6] = 1;
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
	Draw();
	MessageBox(hwnd, _T("哼，你们这战怎么打得？骑士们给我冲！"), _T("提示"), MB_OK);
	map[40][2][8] = 1;
	map[40][2][7] = 271;
	Draw();
	Sleep(100);
	map[40][2][7] = 1;
	map[40][2][6] = 271;
	Draw();
	Sleep(100);
	map[40][2][6] = 1;
	map[40][3][6] = 271;
	Draw();
	Sleep(100);
	map[40][3][6] = 1;
	map[40][4][6] = 271;
	Draw();
	Sleep(100);
	map[40][4][6] = 1;
	map[40][5][6] = 271;
	Draw();
	Sleep(100);
	map[40][5][6] = 1;
	map[40][6][6] = 271;
	Draw();
	if (knight.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((knight.getAttack() - w.getDefend()));
	w.Fight(knight);
	map[40][6][6] = 1;
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
	Draw();
	map[40][2][9] = 1;
	map[40][2][8] = 271;
	Draw();
	Sleep(100);
	map[40][2][8] = 1;
	map[40][2][7] = 271;
	Draw();
	Sleep(100);
	map[40][2][7] = 1;
	map[40][2][6] = 271;
	Draw();
	Sleep(100);
	map[40][2][6] = 1;
	map[40][3][6] = 271;
	Draw();
	Sleep(100);
	map[40][3][6] = 1;
	map[40][4][6] = 271;
	Draw();
	Sleep(100);
	map[40][4][6] = 1;
	map[40][5][6] = 271;
	Draw();
	Sleep(100);
	map[40][5][6] = 1;
	map[40][6][6] = 271;
	Draw();
	if (knight.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((knight.getAttack() - w.getDefend()));
	w.Fight(knight);
	map[40][6][6] = 1;
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
	Draw();
	map[40][2][10] = 1;
	map[40][2][9] = 271;
	Draw();
	Sleep(100);
	map[40][2][9] = 1;
	map[40][2][8] = 271;
	Draw();
	Sleep(100);
	map[40][2][8] = 1;
	map[40][2][7] = 271;
	Draw();
	Sleep(100);
	map[40][2][7] = 1;
	map[40][2][6] = 271;
	Draw();
	Sleep(100);
	map[40][2][6] = 1;
	map[40][3][6] = 271;
	Draw();
	Sleep(100);
	map[40][3][6] = 1;
	map[40][4][6] = 271;
	Draw();
	Sleep(100);
	map[40][4][6] = 1;
	map[40][5][6] = 271;
	Draw();
	Sleep(100);
	map[40][5][6] = 1;
	map[40][6][6] = 271;
	Draw();
	if (knight.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((knight.getAttack() - w.getDefend()));
	w.Fight(knight);
	w.Lose_Hp(1);
	map[40][6][6] = 1;
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
	Draw();
	MessageBox(hwnd, _T("你怎会击败我所有的手下？我和你势不两立。我绝不认输！（骑士队长失去了理智）"), _T("骑士队长"), MB_OK);
	map[40][1][6] = 1;
	map[40][2][6] = 272;
	Draw();
	Sleep(100);
	map[40][2][6] = 1;
	map[40][3][6] = 272;
	Draw();
	Sleep(100);
	map[40][3][6] = 1;
	map[40][4][6] = 272;
	Draw();
	Sleep(100);
	map[40][4][6] = 1;
	map[40][5][6] = 272;
	Draw();
	Sleep(100);
	map[40][5][6] = 1;
	map[40][6][6] = 272;
	Draw();
	Sleep(100);
	if (knightleader.getAttack() - w.getDefend() > 0)
		w.Lose_Hp((knightleader.getAttack() - w.getDefend()));
	w.Fight(knightleader);
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
	map[40][1][6] = 11;
	MessageBox(hwnd, _T("这次先饶了你，下次碰到我会和你正式的决斗，你最好投降。"), _T("骑士队长"), MB_OK);
	map[40][6][6] = 1;
	map[40][5][6] = 272;
	Draw();
	Sleep(100);
	map[40][5][6] = 1;
	map[40][4][6] = 272;
	Draw();
	Sleep(100);
	map[40][4][6] = 1;
	map[40][3][6] = 272;
	Draw();
	Sleep(100);
	map[40][3][6] = 1;
	map[40][2][6] = 272;
	Draw();
	Sleep(100);
	map[40][2][6] = 1;
	map[40][8][6] = 1;
	Draw();
	MessageBox(hwnd, _T("这骑士队长逃走了。"), _T("提示"), MB_OK);
	map[40][2][2] = 21;
	map[40][2][3] = 21;
	map[40][2][4] = 21;
	map[40][2][8] = 24;
	map[40][2][9] = 24;
	map[40][2][10] = 24;
	map[40][4][5] = 27;
	map[40][4][3] = 27;
	map[40][4][4] = 27;
	map[40][4][7] = 25;
	map[40][4][8] = 25;
	map[40][4][9] = 25;
	mciSendString(_T("close Source/31-40.mp3"), 0, 0, 0);
	mciSendString(_T("open Source/41-49.mp3"), 0, 0, 0);
	mciSendString(_T("play Source/41-49.mp3 repeat"), 0, 0, 0);
}

bool bossevent4_1 = false;
void bossEvent4_1()
{
	map[49][3][6] = 281;
	map[49][11][2] = 10;
	Draw();
	Sleep(600);
	MessageBox(hwnd, _T("你终于来了，我很想与你立刻决斗，但我的部下不同意。"), _T("魔王"), MB_OK);
	map[49][3][7] = 307;
	map[49][3][5] = 307;
	map[49][2][5] = 307;
	map[49][2][6] = 307;
	map[49][2][7] = 307;
	map[49][4][5] = 307;
	map[49][4][6] = 307;
	map[49][4][7] = 307;
	bossevent4_1 = true;
}

bool bossevent4_2 = false;
void bossEvent4_2()
{
	MessageBox(hwnd, _T("啊！我怎么被封印了，我只剩下一成的功力了！！！"), _T("魔王"), MB_OK);
	map[49][3][6] = 280;
	bossevent4_2 = true;
}

bool bossevent4_3 = false;
void bossEvent4_3()
{
	MessageBox(hwnd, _T("哈哈哈，很好，你是个合格的战士。"), _T("魔王"), MB_OK);
	map[49][3][7] = 1;
	map[49][3][6] = 17;
	map[49][3][5] = 1;
	map[49][2][5] = 23;
	map[49][2][6] = 1;
	map[49][2][7] = 52;
	map[49][4][5] = 1;
	map[49][4][6] = 1;
	map[49][4][7] = 1;
	map[49][4][2] = 24;
	map[49][4][3] = 24;
	map[49][4][4] = 24;
	map[49][4][8] = 25;
	map[49][4][9] = 25;
	map[49][4][10] = 25;
	map[49][5][5] = 27;
	map[49][5][6] = 27;
	map[49][5][7] = 27;
	map[49][11][2] = 1;
	bossevent4_3 = true;
}

void Eventfinal2()
{
	mciSendString(_T("close Source/51.mp3"), 0, 0, 0);
	mciSendString(_T("open Source/op.mp3"), 0, 0, 0);
	mciSendString(_T("play Source/op.mp3 repeat"), 0, 0, 0);
	char con;

	initgraph(WINDOWSWIDTH, WINDOWSHEIGHT);

	//输出Source
	settextstyle(28, 16, _T("楷体"));
	settextcolor(WHITE);
	outtextxy(120, 100, _T("此次旅程也将化为过去之物"));
	outtextxy(120, 130, _T("此刻正化为过往"));
	outtextxy(120, 160, _T("战士回归大地"));
	outtextxy(120, 190, _T("众神回归天界"));
	outtextxy(120, 220, _T("漫长的战斗告一段落，邪恶的塔被净化。"));
	outtextxy(120, 250, _T("勇士回到了故乡"));
	outtextxy(120, 280, _T("而公主，成为了下一任大法师。"));
	outtextxy(120, 370, _T("好结局 二：勇士打败了魔王，救出了公主。"));
	outtextxy(120, 400, _T("你最终的得分为："));
	outtextxy(400, 400, trans(w.getAttack() * 10 + w.getDefend() * 10 + w.getHp() / 100 + 10000));
	outtextxy(300, 570, _T("隐藏的代码：243319"));

	settextstyle(30, 20, _T("黑体"));
	settextcolor(WHITE);
	outtextxy(250, 600, _T("按回车键结束游戏"));

	//如果按了回车就结束游戏
	while (1)
	{
		con = _getch();

		if (con == 13)
			break;
	}

	cleardevice();
	exit(0);
}

bool ef = false;
void Eventfinal()
{
	mciSendString(_T("close Source/50.mp3"), 0, 0, 0);
	mciSendString(_T("open Source/op.mp3"), 0, 0, 0);
	mciSendString(_T("play Source/op.mp3 repeat"), 0, 0, 0);
	ef = true;
	char con;

	initgraph(WINDOWSWIDTH, WINDOWSHEIGHT);

	//输出Source
	settextstyle(28, 16, _T("楷体"));
	settextcolor(WHITE);
	outtextxy(120, 100, _T("此次旅程也将化为过去之物"));
	outtextxy(120, 130, _T("此刻正化为过往"));
	outtextxy(120, 160, _T("战士回归大地"));
	outtextxy(120, 190, _T("众神回归天界"));
	outtextxy(120, 220, _T("漫长的战斗告一段落，虚伪的塔已崩坏。"));
	outtextxy(120, 250, _T("一念闪过"));
	outtextxy(120, 280, _T("魔王说谎了吗？传言真的是假的吗..."));
	outtextxy(120, 370, _T("好结局 一：勇士打败了魔王，摧毁了魔塔。"));
	outtextxy(120, 400, _T("你最终的得分为："));
	outtextxy(400, 400, trans(w.getAttack() * 10 + w.getDefend() * 10 +w.getHp() / 100));
	outtextxy(300, 570, _T("特别鸣谢：LSY"));
	
	settextstyle(30, 20, _T("黑体"));
	settextcolor(WHITE);
	outtextxy(250, 600, _T("按回车键结束游戏"));

	//如果按了回车就结束游戏
	while (1)
	{
		con = _getch();

		if (con == 13)
			break;
	}

	cleardevice();
	exit(0);
}

void Eventdead()
{
	mciSendString(_T("close Source/31-40.mp3"), 0, 0, 0);
	mciSendString(_T("close Source/41-49.mp3"), 0, 0, 0);
	mciSendString(_T("open Source/op.mp3"), 0, 0, 0);
	mciSendString(_T("play Source/op.mp3 repeat"), 0, 0, 0);
	ef = true;
	char con;

	initgraph(WINDOWSWIDTH, WINDOWSHEIGHT);

	//输出Source
	settextstyle(28, 16, _T("楷体"));
	settextcolor(WHITE);
	outtextxy(120, 100, _T("此次旅程也将化为过去之物"));
	outtextxy(120, 130, _T("此刻正化为过往"));
	outtextxy(120, 220, _T("漫长的战斗告一段落，勇士无力回天。"));
	outtextxy(120, 370, _T("坏结局：勇士被杀死。"));
	outtextxy(120, 400, _T("你最终的得分为："));
	outtextxy(400, 400, trans(w.getAttack() * 10 + w.getDefend() * 10 + w.getHp() / 100));

	settextstyle(30, 20, _T("黑体"));
	settextcolor(WHITE);
	outtextxy(250, 600, _T("按回车键结束游戏"));

	//如果按了回车就结束游戏
	while (1)
	{
		con = _getch();

		if (con == 13)
			break;
	}

	cleardevice();
	exit(0);
}

void JudgeEvent()
{
	if (!e1 && map[3][9][5] == 16)	Event1();
	if (!e2 && map[2][2][6] == 1 && map[2][2][8] == 1) Event2();
	if (!e3 && map[8][5][9] == 1 && map[8][5][11] == 1)	Event3();
	if (!boss_event1_1 && (map[10][5][6] == 16 || map[10][5][6] == 17 || map[10][5][6] == 18 || map[10][5][6] == 19))
	{
		bossEvent1_1();
	}
	if (boss_event1_1 && !boss_event1_2 && map[10][4][6] == 1 && map[10][6][6] == 1 && map[10][4][5] == 1 &&
		map[10][4][7] == 1 && map[10][5][5] == 1 && map[10][5][7] == 1 && map[10][6][5] == 1 && map[10][6][7] == 1)
	{
		bossEvent1_2();
	}
	if (boss_event1_2 && !boss_event1_3 && map[10][1][6] == 1)
	{
		bossEvent1_3();
	}
	if (!e4 && map[11][5][1] == 1 && map[11][5][3] == 1)
	{
		Event4();
	}
	if (!e6 && map[14][1][1] == 1 && map[14][1][3] == 1 && map[14][2][2] == 1)
	{
		Event6();
	}
	if (!e7 && map[15][6][6] == 1)
	{
		Event7();
	}
	if (!e8 && map[12][1][11] == 1)
	{
		Event8();
	}
	if (!e9 && map[17][8][1] == 1 && map[17][8][3] == 1)
	{
		Event9();
	}
	if (!e10 && map[17][5][1] == 1 && map[17][5][3] == 1)
	{
		Event10();
	}
	if (!e17 && map[10][8][6] == 17)
	{
		Event17();
	}
	if (!e11 && map[17][8][9] == 1 && map[17][8][11] == 1)
	{
		Event11();
	}
	if (!e12 && map[17][5][9] == 1 && map[17][5][11] == 1)
	{
		Event12();
	}
	if (!e13 && map[16][11][11] == 1)
	{
		Event13();
	}
	if (!e14 && map[19][3][6] == 1)
	{
		Event14();
	}
	if (!bossevent2_1 && map[20][8][6] == 16)
	{
		bossEvent2_1();
	}
	if (bossevent2_1 && !bossevent2_2 && map[20][6][6] == 1)
	{
		bossEvent2_2();
	}
	if (!e15_1 && map[25][9][6] == 16)
	{
		Event15_1();
	}
	if (e15_1 && !e15_2 && map[25][6][6] == 1)
	{
		Event15_2();
	}
	if (!e16 && map[30][5][3] == 1 && map[30][5][4] == 1 && map[30][5][5] == 1 && map[30][5][7] == 1 && map[30][5][8] == 1 && map[30][5][9] == 1)
	{
		Event16();
	}
	if (!e18 && map[32][10][1] == 1 && map[32][10][3] == 1)
	{
		Event18();
	}
	if (!e19 && map[33][5][10] == 17)
	{
		Event19();
	}
	if (!e20 && map[33][5][9] == 1 && map[33][5][11] == 1 && map[33][7][9] == 1 && map[33][7][11] == 1)
	{
		Event20();
	}
	if (!e21 && map[34][4][5] == 1 && map[34][4][7] == 1 && map[34][4][9] == 1 && map[34][4][11] == 1
		&& map[34][8][5] == 1 && map[34][8][7] == 1 && map[34][8][9] == 1 && map[34][8][11] == 1)
	{
		Event21();
	}
	if (!e22 && map[38][10][1] == 1 && map[38][10][3] == 1)
	{
		Event22();
	}
	if (!e23 && (map[38][6][2] == 17 || map[38][6][2] == 16))
	{
		Event23();
	}
	if (!e24 && map[39][2][2] == 6 && map[39][2][4] == 1 && map[39][2][6] == 6 && map[39][4][2] == 6
		&& map[39][4][4] == 6 && map[39][4][6] == 1 && map[39][6][2] == 6 && map[39][6][4] == 6 &&
		map[39][6][4] == 6)
	{
		Event24();
	}
	if (!e25 && map[32][10][6] == 16)
	{
		Event25();
	}
	if (!bossevent3 && map[40][7][6] == 16)
	{
		bossEvent3();
	}
	if (!e26 && map[35][7][6] == 1)
	{
		Event26();
	}
	if (!e27 && w.getClevel() == 42)
	{
		Event27();
	}
	if (!e28 && map[41][2][2] == 1)
	{
		Event28();
	}
	if (!e29 && map[41][2][10] == 1)
	{
		Event29();
	}
	if (e29 && !e30 && map[41][2][10] == 1)
	{
		Event30();
	}
	if (!e31 && map[44][9][5] == 1 && map[44][9][7] == 1)
	{
		Event31();
	}
	if (!e32 && map[45][9][5] == 1 && map[45][11][5] == 1)
	{
		Event32();
	}
	if (!e33 && map[45][9][8] == 1 && map[45][11][8] == 1)
	{
		Event33();
	}
	if (!e34 && map[48][1][1] == 1)
	{
		Event34();
	}
	if (!e35 && map[49][10][5] == 1 && map[49][10][7] == 1)
	{
		Event35();
	}
	if (!e36 && map[49][8][5] == 1 && map[49][8][7] == 1)
	{
		Event36();
	}
	if (!e37 && w.getClevel() == 51)
	{
		Event37();
	}
	if (!bossevent4_1 && !bossevent4_3 && map[49][6][6] == 16)
	{
		bossEvent4_1();
	}
	if (bossevent4_1 && !bossevent4_2 && !bossevent4_3 && map[49][2][6] == 1 && map[49][3][5] == 1 && map[49][3][7] == 1 && map[49][4][6] == 1)
	{
		bossEvent4_2();
	}
	if (bossevent4_1 && !bossevent4_3 && map[49][3][6] == 1)
	{
		bossEvent4_3();
	}
	if (!ef && map[50][5][6] == 1 && w.getClevel() == 50 && !getflyup)
	{
		Eventfinal();
	}
}

int main()
{
	mciSendString(_T("open Source/op.mp3"), 0, 0, 0);
	mciSendString(_T("play Source/op.mp3 repeat"), 0, 0, 0);
	Welcome();
	Introduction();
	Init();
	mciSendString(_T("close Source/op.mp3"), 0, 0, 0);
	mciSendString(_T("open Source/0-10.mp3"), 0, 0, 0);
	mciSendString(_T("play Source/0-10.mp3 repeat"), 0, 0, 0);
	int x = 0, y = 0;
	while (1)
	{
		if (w.getLevel() > w.highlevel) w.HighLevelUp();
		FindRole(x, y);

		Draw();

		con = _getch();	

		switch (con)
		{
		case 'W':
		case 'w':GameUp(x, y); break;
		case 'A':
		case 'a':GameLeft(x, y); break;
		case 'D':
		case 'd':GameRight(x, y); break;
		case 'S':
		case 's':GameDown(x, y); break;
		case 'Q':
		case 'q':queryBook(); break;
		case 'F':
		case 'f':useCentred_tp(); break;
		case 'N':
		case 'n':checkNotebook(); break;
		case 'T':
		case 't':useAxe(); break;
		case 'B':
		case 'b':useBomb(); break;
		case 'R':
		case 'r':useice(); break;
		case 'O':
		case 'o':useHolyWater(); break;
		case 'M':
		case 'm':usefly_down(); break;
		case 'V':
		case 'v':usefly_up(); break;
		case 'E':
		case 'e':useearthquake(); break;
		case 'K':
		case 'k':usemagickey(); break;
		case 72: Convey_Up(); break;
		case 80: Convey_Down(); break;
		}
		if(w.getClevel() > 40 && (con == 'w' || con == 'W' || con == 'a' || con == 'A' || con == 's' || con == 'S' || con == 'd' || con == 'D')) Judge_magic();
		JudgeEvent();
	}

	return 0;
}


//游戏欢迎界面
void Welcome()
{
	char con;

	initgraph(WINDOWSWIDTH, WINDOWSHEIGHT);

	//输出Source
	settextstyle(200, 35, _T("Blackadder ITC"));
	settextcolor(YELLOW);
	outtextxy(30, 100, _T("Tower of the Sorcerer"));

	//输出按回车键开始游戏
	settextstyle(30, 20, _T("黑体"));
	settextcolor(WHITE);
	outtextxy(250, 400, _T("按回车键继续"));

	//输出作者
	settextstyle(16, 16, _T("宋体"));
	outtextxy(500, 630, _T("作者:DrSHW 协助:LSY"));

	//如果按了回车就开始游戏
	while (1)
	{
		con = _getch();

		if (con == 13)
			break;
	}

	cleardevice();
	settextstyle(16, 8, _T("黑体"));
}

void Introduction()
{
	char con;

	initgraph(WINDOWSWIDTH, WINDOWSHEIGHT);

	//输出Source
	settextstyle(28, 16, _T("楷体"));
	settextcolor(WHITE);
	outtextxy(120, 100, _T("得到伟大的知识，"));
	outtextxy(120, 130, _T("我要用全能的力量粉碎神剑，"));
	outtextxy(120, 160, _T("时机已到..."));
	//输出按回车键开始游戏
	settextstyle(30, 20, _T("黑体"));
	settextcolor(WHITE);
	outtextxy(250, 400, _T("按回车键开始游戏"));

	//如果按了回车就开始游戏
	while (1)
	{
		con = _getch();

		if (con == 13)
			break;
	}

	cleardevice();
	settextstyle(16, 8, _T("黑体"));
}

//初始化游戏 资料、角色和怪物信息
void Init()
{
	//加载图片
	loadimage(&wall, _T("Source/墙.jpg"), SIZE, SIZE);
	loadimage(&_floor, _T("Source/地板.jpg"), SIZE, SIZE);
	loadimage(&_void, _T("Source/虚空.png"), SIZE, SIZE);
	loadimage(&ydoor, _T("Source/黄门.jpg"), SIZE, SIZE);
	loadimage(&bdoor, _T("Source/蓝门.jpg"), SIZE, SIZE);
	loadimage(&rdoor, _T("Source/红门.png"), SIZE, SIZE);
	loadimage(&sdoor, _T("Source/花门.png"), SIZE, SIZE);
	loadimage(&ykey, _T("Source/黄钥匙.jpg"), SIZE, SIZE);
	loadimage(&bkey, _T("Source/蓝钥匙.jpg"), SIZE, SIZE);
	loadimage(&rkey, _T("Source/红钥匙.png"), SIZE, SIZE);
	loadimage(&rstone, _T("Source/红水晶.jpg"), SIZE, SIZE);
	loadimage(&bstone, _T("Source/蓝水晶.jpg"), SIZE, SIZE);
	loadimage(&rliquid, _T("Source/红药水.jpg"), SIZE, SIZE);
	loadimage(&bliquid, _T("Source/蓝药水.jpg"), SIZE, SIZE);
	loadimage(&_gslime, _T("Source/绿史莱姆.jpg"), SIZE, SIZE);
	loadimage(&_rslime, _T("Source/红史莱姆.jpg"), SIZE, SIZE);
	loadimage(&_bat, _T("Source/蝙蝠.jpg"), SIZE, SIZE);
	loadimage(&_skull, _T("Source/骷髅人.jpg"), SIZE, SIZE);
	loadimage(&_bskull, _T("Source/骷髅士兵.jpg"), SIZE, SIZE);
	loadimage(&_kskull, _T("Source/骷髅队长.png"), SIZE, SIZE);
	loadimage(&primary_wizard, _T("Source/法师.jpg"), SIZE, SIZE);
	loadimage(&roleup, _T("Source/角色上.jpg"), SIZE, SIZE);
	loadimage(&roledown, _T("Source/角色下.jpg"), SIZE, SIZE);
	loadimage(&roleleft, _T("Source/角色左.jpg"), SIZE, SIZE);
	loadimage(&roleright, _T("Source/角色右.jpg"), SIZE, SIZE);
	loadimage(&leader, _T("Source/指引者.jpg"), SIZE, SIZE);
	loadimage(&helper, _T("Source/帮助者.jpg"), SIZE, SIZE);
	loadimage(&suffering, _T("Source/狱友.jpg"), SIZE, SIZE);
	loadimage(&store, _T("Source/商店.png"), SIZE, SIZE);
	loadimage(&lstore, _T("Source/商店左.png"), SIZE, SIZE);
	loadimage(&rstore, _T("Source/商店右.png"), SIZE, SIZE);
	loadimage(&stairsup, _T("Source/上楼梯.jpg"), SIZE, SIZE);
	loadimage(&stairsdown, _T("Source/下楼梯.jpg"), SIZE, SIZE);
	loadimage(&cage, _T("Source/笼子.jpg"), SIZE, SIZE);
	loadimage(&ironsword, _T("Source/剑.jpg"), SIZE, SIZE);
	loadimage(&ironshield, _T("Source/盾.jpg"), SIZE, SIZE);
	loadimage(&knight_sword, _T("Source/骑士剑.png"), SIZE, SIZE);
	loadimage(&knight_shield, _T("Source/骑士盾.png"), SIZE, SIZE);
	loadimage(&silvershield, _T("Source/银盾.png"), SIZE, SIZE);
	loadimage(&holy_sword, _T("Source/神圣剑.png"), SIZE, SIZE);
	loadimage(&convey, _T("Source/传送道具.jpg"), SIZE, SIZE);
	loadimage(&primary_defender, _T("Source/初级卫兵.png"), SIZE, SIZE);
	loadimage(&_boss, _T("Source/BOSS.jpg"), SIZE, SIZE);
	loadimage(&_sboss, _T("Source/魔法警卫.jpg"), SIZE, SIZE);
	loadimage(&fire, _T("Source/岩浆.jpg"), SIZE, SIZE);
	loadimage(&notebook, _T("Source/记事本.png"), SIZE, SIZE);
	loadimage(&big_bat, _T("Source/大蝙蝠.png", SIZE, SIZE));
	loadimage(&_Orc, _T("Source/兽人.png", SIZE, SIZE));
	loadimage(&big_slime, _T("Source/大史莱姆.png", SIZE, SIZE));
	loadimage(&senior_wizard, _T("Source/高级法师.png", SIZE, SIZE));
	loadimage(&_great_orc, _T("Source/兽人武士.png", SIZE, SIZE));
	loadimage(&_stoneman, _T("Source/石头人.png", SIZE, SIZE));
	loadimage(&_vampire, _T("Source/吸血鬼.jpg", SIZE, SIZE));
	loadimage(&silversword, _T("Source/银剑.png", SIZE, SIZE));
	loadimage(&cross, _T("Source/十字架.jpg", SIZE, SIZE));
	loadimage(&_octopus_rm, _T("Source/大乌贼右中.png", SIZE, SIZE));
	loadimage(&_octopus_mm, _T("Source/大乌贼正中.png", SIZE, SIZE));
	loadimage(&_octopus_lm, _T("Source/大乌贼左中.png", SIZE, SIZE));
	loadimage(&_octopus_ru, _T("Source/大乌贼右上.png", SIZE, SIZE));
	loadimage(&_octopus_um, _T("Source/大乌贼上中.png", SIZE, SIZE));
	loadimage(&_octopus_lu, _T("Source/大乌贼左上.png", SIZE, SIZE));
	loadimage(&_octopus_rd, _T("Source/大乌贼右下.png", SIZE, SIZE));
	loadimage(&_octopus_dm, _T("Source/大乌贼下中.png", SIZE, SIZE));
	loadimage(&_octopus_ld, _T("Source/大乌贼左下.png", SIZE, SIZE));
	loadimage(&_dragon_rm, _T("Source/魔龙右中.png", SIZE, SIZE));
	loadimage(&_dragon_mm, _T("Source/魔龙正中.png", SIZE, SIZE));
	loadimage(&_dragon_lm, _T("Source/魔龙左中.png", SIZE, SIZE));
	loadimage(&_dragon_ru, _T("Source/魔龙右上.png", SIZE, SIZE));
	loadimage(&_dragon_um, _T("Source/魔龙上中.png", SIZE, SIZE));
	loadimage(&_dragon_lu, _T("Source/魔龙左上.png", SIZE, SIZE));
	loadimage(&_dragon_rd, _T("Source/魔龙右下.png", SIZE, SIZE));
	loadimage(&_dragon_dm, _T("Source/魔龙下中.png", SIZE, SIZE));
	loadimage(&_dragon_ld, _T("Source/魔龙左下.png", SIZE, SIZE));
	loadimage(&_ghost, _T("Source/幽灵.png", SIZE, SIZE));
	loadimage(&_skwarr, _T("Source/鬼战士.png", SIZE, SIZE));
	loadimage(&_warr, _T("Source/战士.png", SIZE, SIZE));
	loadimage(&medium_defender, _T("Source/中级卫兵.jpg", SIZE, SIZE));
	loadimage(&_brisword, _T("Source/双手剑士.png", SIZE, SIZE));
	loadimage(&_knight, _T("Source/骑士.png", SIZE, SIZE));
	loadimage(&_knightleader, _T("Source/骑士队长.png", SIZE, SIZE));
	loadimage(&axe, _T("Source/破墙稿.png", SIZE, SIZE));
	loadimage(&_bomb, _T("Source/炸弹.png", SIZE, SIZE));
	loadimage(&_centred_tp, _T("Source/中心对称飞行器.jpg", SIZE, SIZE));
	loadimage(&_greatWiz, _T("Source/大法师.png", SIZE, SIZE));
	loadimage(&_princess, _T("Source/公主.png", SIZE, SIZE));
	loadimage(&_lucky_coin, _T("Source/幸运金币.png", SIZE, SIZE));
	loadimage(&primary_sorcerer, _T("Source/初级巫师.jpg", SIZE, SIZE));
	loadimage(&senior_sorcerer, _T("Source/高级巫师.jpg", SIZE, SIZE));
	loadimage(&king_slime, _T("Source/史莱姆王.jpg", SIZE, SIZE));
	loadimage(&blood_bat, _T("Source/吸血蝙蝠.jpg", SIZE, SIZE));
	loadimage(&dark_knight, _T("Source/黑暗骑士.jpg", SIZE, SIZE));
	loadimage(&magic_guard, _T("Source/魔法警卫.png", SIZE, SIZE));
	loadimage(&divine_shield, _T("Source/圣盾.png", SIZE, SIZE));
	loadimage(&divine_sword, _T("Source/圣剑.png", SIZE, SIZE));
	loadimage(&senior_guard, _T("Source/高级卫兵.jpg", SIZE, SIZE));
	loadimage(&holy_shield, _T("Source/神圣盾.jpg", SIZE, SIZE));
	loadimage(&magic_key, _T("Source/魔法钥匙.png", SIZE, SIZE)); 
	loadimage(&dragon_killer, _T("Source/屠龙匕.jpg", SIZE, SIZE));
	loadimage(&_ice_magic, _T("Source/冰冻徽章.jpg", SIZE, SIZE));
	loadimage(&_fly_down, _T("Source/向下飞行器.jpg", SIZE, SIZE));
	loadimage(&_fly_up, _T("Source/向上飞行器.jpg", SIZE, SIZE));

	//输出信息框及信息
	rectangle(GAP * 2 + SIZE * NUM, GAP, GAP * 2 + SIZE * NUM + INFORMATIONWIDTH, GAP + INFORMATIONHEIGHT);
	outtextxy(GAP * 2 + SIZE * NUM + 14, GAP + 35, _T("状态栏："));
	outtextxy(GAP * 2 + SIZE * NUM + 14, GAP + 65, _T("生命:"));
	outtextxy(GAP * 2 + SIZE * NUM + 14, GAP + 85, _T("攻击:"));
	outtextxy(GAP * 2 + SIZE * NUM + 14, GAP + 105, _T("防御:"));
	outtextxy(GAP * 2 + SIZE * NUM + 14, GAP + 125, _T("金钱:"));
	outtextxy(GAP * 2 + SIZE * NUM + 14, GAP + 150, _T("黄钥匙:"));
	outtextxy(GAP * 2 + SIZE * NUM + 14, GAP + 170, _T("蓝钥匙:"));
	outtextxy(GAP * 2 + SIZE * NUM + 14, GAP + 190, _T("红钥匙:"));
	outtextxy(GAP * 2 + SIZE * NUM + 14, GAP + 220, _T("当前层数:"));
	outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 250, _T("当前武器:"));
	outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 270, _T("当前防具:"));
	outtextxy(GAP * 2 + SIZE * NUM + 14, GAP + 300, _T("物品栏："));
}

void Draw()
{
	int j, i;

	for (j = 1; j <= NUM; j++)
	{
		for (i = 1; i <= NUM; i++)
		{
			switch (map[w.getClevel()][j][i])
			{
			case 0:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &wall); break;
			case 1:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_floor); break;
			case 2:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &wall); break;
			case 3:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_floor); break;
			case 4:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &fire); break;
			case 5:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_void); break;
			case 6:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &ydoor); break;
			case 7:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &bdoor); break;
			case 8:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &rdoor); break;
			case 9:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &cage); break;
			case 10:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &sdoor); break;
			case 11:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &stairsup); break;
			case 12:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &stairsdown); break;

			case 16:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &roleup); break;
			case 17:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &roledown); break;
			case 18:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &roleleft); break;
			case 19:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &roleright); break;

			case 21:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &ykey); break;
			case 22:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &bkey); break;
			case 23:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &rkey); break;

			case 24:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &rstone); break;
			case 25:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &bstone); break;
			case 26:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &rliquid); break;
			case 27:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &bliquid); break;

			case 31:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &ironsword); break;
			case 32:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &ironshield); break;
			case 33:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &silversword); break;
			case 34:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &silvershield); break;
			case 35:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &knight_sword); break;
			case 36:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &knight_shield); break;
			case 37:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &divine_sword); break;
			case 38:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &divine_shield); break;
			case 39:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &holy_sword); break;
			case 40:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &holy_shield); break;


			case 41:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &convey); break;
			case 42:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &notebook); break;
			case 43:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &cross); break;
			case 44:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &axe); break;
			case 45:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_bomb); break;
			case 46:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_centred_tp); break;
			case 47:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_lucky_coin); break;
			case 48:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_ice_magic); break;
			case 49:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_fly_down); break;
			case 50:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_fly_up); break;
			case 51:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &magic_key); break;
			case 52:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &dragon_killer); break;
			case 92:
			case 93:
			case 94:
			case 95:
			case 96:
			case 97:
			case 98:
			case 99:
			case 100:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &suffering); break;
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 106:
			case 107:
			case 108:
			case 109:
			case 110:
			case 111:
			case 112:
			case 113:
			case 114:
			case 115:
			case 116:
			case 117:
			case 118:
			case 119:
			case 120:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &leader); break;

			case 131:
			case 132:
			case 133:
			case 134:
			case 135:
			case 136:
			case 137:
			case 138:
			case 139:
			case 140:
			case 141:
			case 142:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &helper); break;


			case 160:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &lstore); break;
			case 161:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &store); break;
			case 162:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &rstore); break;
			case 163:
			case 164:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_princess); break;
			case 251:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_gslime); break;
			case 252:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_rslime); break;
			case 253:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_bat); break;
			case 254:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &primary_wizard); break;
			case 255:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_skull); break;
			case 256:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_bskull); break;
			case 257:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &primary_defender); break;
			case 258:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_kskull); break;
			case 259:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &big_slime); break;
			case 260:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &big_bat); break;
			case 261:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &senior_wizard); break;
			case 262:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_Orc); break;
			case 263:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_great_orc); break;
			case 264:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_stoneman); break;
			case 265:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_vampire); break;
			case 266:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_skwarr); break;
			case 267:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_warr); break;
			case 268:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_ghost); break;
			case 269:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &medium_defender); break;
			case 270:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_brisword); break;
			case 271:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_knight); break;
			case 272:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_knightleader); break;
			case 282:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_greatWiz); break;
			case 280:
			case 281:
			case 283:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_boss); break;
			case 284:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_octopus_ru); break;
			case 285:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_octopus_um); break;
			case 286:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_octopus_lu); break;
			case 287:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_octopus_rm); break;
			case 288:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_octopus_mm); break;
			case 289:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_octopus_lm); break;
			case 290:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_octopus_rd); break;
			case 291:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_octopus_dm); break;
			case 292:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_octopus_ld); break;
			case 293:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_dragon_lu); break;  //魔龙左上
			case 294:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_dragon_um); break;  //中上
			case 295:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_dragon_ru); break;  //右上
			case 296:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_dragon_lm); break;
			case 297:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_dragon_mm); break;
			case 298:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_dragon_rm); break;
			case 299:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_dragon_ld); break;
			case 300:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_dragon_dm); break;
			case 301:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &_dragon_rd); break;
			case 302:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &primary_sorcerer); break; //初级巫师
			case 303:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &senior_sorcerer); break;  //高级巫师
			case 304:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &king_slime); break;       //史莱姆王
			case 305:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &blood_bat); break;        //吸血蝙蝠
			case 306:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &dark_knight); break;      //黑暗骑士
			case 307:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &magic_guard); break;      //魔法警卫
			case 308:putimage(GAP + (i - 1) * SIZE, GAP + (j - 1) * SIZE, &senior_guard); break;      //高级卫兵
			}
		}
	}

	//画游戏框
	rectangle(GAP, GAP, GAP + SIZE * NUM, GAP + SIZE * NUM);

	//消除之前的信息
	setfillcolor(BLACK);
	solidrectangle(GAP * 2 + SIZE * NUM + 60, GAP + 65, GAP * 2 + SIZE * NUM + 92, GAP + 81);    //生命
	solidrectangle(GAP * 2 + SIZE * NUM + 60, GAP + 85, GAP * 2 + SIZE * NUM + 92, GAP + 106);   //攻击
	solidrectangle(GAP * 2 + SIZE * NUM + 60, GAP + 105, GAP * 2 + SIZE * NUM + 92, GAP + 131);  //防御
	solidrectangle(GAP * 2 + SIZE * NUM + 60, GAP + 125, GAP * 2 + SIZE * NUM + 92, GAP + 156);  //金钱
	solidrectangle(GAP * 2 + SIZE * NUM + 76, GAP + 150, GAP * 2 + SIZE * NUM + 92, GAP + 216);  //黄钥匙
	solidrectangle(GAP * 2 + SIZE * NUM + 76, GAP + 170, GAP * 2 + SIZE * NUM + 92, GAP + 241);  //蓝钥匙
	solidrectangle(GAP * 2 + SIZE * NUM + 76, GAP + 210, GAP * 2 + SIZE * NUM + 92, GAP + 265);  //红钥匙

	//输出信息
	outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 65, trans(w.getHp()));			//生命值
	outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 85, trans(w.getAttack()));		//攻击
	outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 105, trans(w.getDefend()));		//防御
	outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 125, trans(w.getMoney()));		//金钱
	outtextxy(GAP * 2 + SIZE * NUM + 76, GAP + 150, trans(w.getYellow_Key()));  //黄钥匙
	outtextxy(GAP * 2 + SIZE * NUM + 76, GAP + 170, trans(w.getBlue_Key()));	//蓝钥匙
	outtextxy(GAP * 2 + SIZE * NUM + 76, GAP + 190, trans(w.getRed_Key()));		//红钥匙
	outtextxy(GAP * 2 + SIZE * NUM + 90, GAP + 220, trans(w.getClevel()));  // 当前楼层数
	switch (w.getSword())// 剑
	{
	case 0: {outtextxy(GAP * 2 + SIZE * NUM + 90, GAP + 250, _T("无        "));   break; }
	case 31: {outtextxy(GAP * 2 + SIZE * NUM + 90, GAP + 250, _T("铁剑  "));   break; }
	case 33: {outtextxy(GAP * 2 + SIZE * NUM + 90, GAP + 250, _T("银剑  "));   break; }
	case 35: {outtextxy(GAP * 2 + SIZE * NUM + 90, GAP + 250, _T("骑士剑")); break; }
	case 37: {outtextxy(GAP * 2 + SIZE * NUM + 90, GAP + 250, _T("圣剑  "));  break; }
	case 39: {outtextxy(GAP * 2 + SIZE * NUM + 90, GAP + 250, _T("神圣剑")); break; }
	default:
		break;
	}
	switch (w.getShield())// 防具
	{
	case 0: {outtextxy(GAP * 2 + SIZE * NUM + 90, GAP + 270, _T("无         "));   break; }
	case 32: {outtextxy(GAP * 2 + SIZE * NUM + 90, GAP + 270, _T("铁盾  "));   break; }
	case 34: {outtextxy(GAP * 2 + SIZE * NUM + 90, GAP + 270, _T("银盾  "));   break; }
	case 36: {outtextxy(GAP * 2 + SIZE * NUM + 90, GAP + 270, _T("骑士盾")); break; }
	case 38: {outtextxy(GAP * 2 + SIZE * NUM + 90, GAP + 270, _T("圣盾  "));  break; }
	case 40: {outtextxy(GAP * 2 + SIZE * NUM + 90, GAP + 270, _T("神圣盾")); break; }
	default:
		break;
	}
}
	
void FindRole(int &prow, int &pcol)
{
	for (prow = 1; prow <= NUM; prow ++)
	{
		for (pcol = 1; pcol <= NUM; pcol ++)
		{
			switch (map[w.getLevel()][prow][pcol])
			{
			case 16:
			case 17:
			case 18:
			case 19: return;
			}
		}
	}
}

//0墙 1地板 2暗墙 3(全向)隐形墙 4岩浆 5虚空 6黄门 7蓝门 8红门 9铁门 10机关门
//11上楼 12下楼 16-19角色朝向
// 21 22 23 黄蓝红钥匙	24 25红蓝宝石	26 27 红蓝血瓶
// 31-40 各类剑盾
// 41 传送杖
// 100 小偷 101 2楼商人 102 2楼老头 103 3楼老头
// 251绿史莱姆 252红史莱姆 253小蝙蝠 254初级法师 255骷髅人 256骷髅士兵  257 初级卫兵
void GameUp(int row, int col)
{
	int count, loss, ID, HP;      //攻击次数与角色损失血量,弹框返回值,商店购买增加的血量
	char con;
	bool flag0;
	hwnd = GetHWnd();    //弹窗前置

	switch (map[w.getLevel()][row - 1][col])
	{
	case 0: //遇到墙
	case 4: //遇到岩浆
	case 284:
	case 285:
	case 286:
	case 287:
	case 288:
	case 289:
	case 290:
	case 292:
	case 301:
	case 299:
	case 160://遇到商店左
	case 162://遇到商店右
	case 10://遇到花门
		map[w.getLevel()][row][col] = 16;
		break;
	case 1: //人的前面是空地
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 5: //传送至50楼
		if (w.getClevel() == 24)
		{
			int k = 26;
			while (k--)
				w.LevelUp();
		}
		else
		{
			map[w.getLevel()][row][col] = 16;
		}
		break;
	case 2:	//人的前面是暗墙
		map[w.getLevel()][row - 1][col] = 1;
		map[w.getLevel()][row][col] = 16;
		break;
	case 3: //人的前面是(全向)隐形墙
		map[w.getLevel()][row - 1][col] = 0;
		map[w.getLevel()][row][col] = 16;
		break;
	case 6://遇到黄门
		if (w.getYellow_Key() == 0)
		{
			map[w.getLevel()][row][col] = 16;
			Draw();
			MessageBox(hwnd, _T("黄钥匙不足"), _T("提示"), MB_OK);
		}
		else
		{
			map[w.getLevel()][row - 1][col] = 1;
			map[w.getLevel()][row][col] = 16;
			w.Spend_Yellow_Key();
		}
		break;
	case 7://遇到蓝门
		if (w.getBlue_Key() == 0)
		{
			map[w.getLevel()][row][col] = 16;
			Draw();
			MessageBox(hwnd, _T("蓝钥匙不足"), _T("提示"), MB_OK);
		}
		else
		{
			map[w.getLevel()][row - 1][col] = 1;
			map[w.getLevel()][row][col] = 16;
			w.Spend_Blue_Key();
		}
		break;
	case 8://遇到红门
		if (w.getRed_Key() == 0)
		{
			map[w.getLevel()][row][col] = 16;
			Draw();
			MessageBox(hwnd, _T("红钥匙不足"), _T("提示"), MB_OK);
		}
		else
		{
			map[w.getLevel()][row - 1][col] = 1;
			map[w.getLevel()][row][col] = 16;
			w.Spend_Red_Key();
		}
		break;
	case 9://遇到铁门
		if (w.getClevel() == 51)
		{
			map[w.getLevel()][row - 1][col] = 1;
			map[w.getLevel()][row][col] = 16;
		}
		else
		{
			map[w.getLevel()][row][col] = 16;
		}	
		break;
	case 11:	// 遇到上楼梯
		w.LevelUp();
		if(w.getClevel() == 44)
			w.LevelUp();
		break;
	case 12:	// 遇到下楼梯
		w.LevelDown();
		if (w.getClevel() == 44)
			w.LevelDown();
		break;
	case 21:	// 黄钥匙
		w.Get_Yellow_Key();
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 22:	// 蓝钥匙
		w.Get_Blue_Key();
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 23:	// 红钥匙
		w.Get_Red_Key();
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 24:	// 红宝石
		w.Raise_Attack((w.getLevel() - 1 )/ 10 + 1);
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 25:	// 蓝宝石
		w.Raise_Defend((w.getLevel() - 1) / 10 + 1);
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 26:	// 红血瓶
		w.Raise_Hp(50 * (((w.getLevel() - 1) / 10) + 1));
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 27:	// 蓝血瓶
		w.Raise_Hp(200 * (((w.getLevel() - 1) / 10) + 1));
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 31:
		w.Raise_Attack(10);
		w.SetSword(31);
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 32:
		w.Raise_Defend(10);
		w.SetShield(32);
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 33:
		w.Raise_Attack(20);
		w.SetSword(33);
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 34:
		w.Raise_Defend(20);
		w.SetShield(34);
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 35:
		w.Raise_Attack(40);
		w.SetSword(35);
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 36:
		w.Raise_Defend(40);
		w.SetShield(35);
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 37:
		w.Raise_Attack(50);
		w.SetSword(37);
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 38:
		w.Raise_Defend(50);
		w.SetShield(38);
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 39:
		w.Raise_Attack(100);
		w.SetSword(40);
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		break;
	case 40:
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		Draw();
		w.Raise_Defend(100);
		MessageBox(hwnd, _T("获得神圣盾！(免疫魔法伤害)"), _T("提示"), MB_OK);
		w.SetShield(40);
		break;
	case 43:
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得十字架！(对兽人和吸血鬼伤害伤害翻倍)"), _T("提示"), MB_OK);
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 360, _T("十字架"));
		getCross = true;
		break;
	case 44:
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得破墙镐！按T键使用，仅能使用一次。（可破坏四周的墙）"), _T("提示"), MB_OK);
		getAxe = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 400, _T("T:破墙镐 未使用"));
		break;
	case 45:
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得炸弹！按B键使用。(炸毁周围敌人，对boss无效。)"), _T("提示"), MB_OK);
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 455, _T("B:炸弹 未使用"));
		getBomb = true;
		break;
	case 46:
		map[w.getLevel()][row + 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得中心对称飞行器！按键使用，仅能使用三次。（飞到该层楼中心对称的位置，此位置必须是空地。）"), _T(""), MB_OK);
		getCentred_tp = 3;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 420, _T("F:中心对称飞行器"));
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 435, _T("剩余:"));
		outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 435, trans(getCentred_tp));
		break;
	case 47:
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得幸运金币！(与怪物对战时获得双倍金币)"), _T("提示"), MB_OK);
		getLuckyCoin = true;
		outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 360, _T("幸运金币"));
		break;
	case 48:
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得冰冻魔法！(R键消除四周的岩浆)"), _T("提示"), MB_OK);
		geticemagic = true;
		outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 475, _T("R:冰冻魔法"));
		break;
	case 49:
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得向下飞行器！(M键使用，可向下飞行至下一层楼梯处，一次性使用)"), _T("提示"), MB_OK);
		getflydown = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 495, _T("M:向下飞行 未使用"));
		break;
	case 50:
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得向上飞行器！(V键使用，可向上飞行至上一层楼梯处，一次性使用)"), _T("提示"), MB_OK);
		getflyup = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 515, _T("V:向上飞行 未使用"));
		break;
	case 51:
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得魔法钥匙！(K键使用，可清除当前一整层楼的黄门，一次性使用)"), _T("提示"), MB_OK);
		getmagickey = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 535, _T("K:魔法钥匙 未使用"));
		break;
	case 52:
		map[w.getLevel()][row - 1][col] = 16;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得屠龙匕！(对魔龙的伤害翻倍)"), _T("提示"), MB_OK);
		getdragonkiller = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 475, _T("屠龙匕"));
		break;
	case 94:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query94();
		break;
	case 95:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query95();
		break;
	case 96:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query96();
		break;
	case 99:	//4楼老人
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query99();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 102:
		map[w.getLevel()][row][col] = 16;
		Draw();
		flag0 = Query102();
		if (flag0)
			map[w.getLevel()][row - 1][col] = 1;
		break;
	case 103:	//怪物手册，3F的指引者
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query103();
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 320, _T("Q:查看怪物手册"));
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 104:	//4楼老人
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query104();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 105:	//6楼老人
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query105();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 108:	
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query108();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 109:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query109();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 110:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query110();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 111:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query111();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 112:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query112();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 113:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query113();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 114:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query114();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 115:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query115();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 116:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query116();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 117:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query117();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 118:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query118();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 119:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query119();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 120:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query120();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 131:
		map[w.getLevel()][row][col] = 16;
		Draw();
		Query131();
		map[w.getLevel()][row - 1][col] = 1;
		break;
	case 132:
		map[w.getLevel()][row][col] = 16;
		Draw();
		flag0 = Query132();
		if (flag0)
			map[w.getLevel()][row - 1][col] = 1;
		break;
	case 133:
		map[w.getLevel()][row][col] = 16;
		Draw();
		flag0 = Query133();
		if (flag0)
			map[w.getLevel()][row - 1][col] = 1;
		break;
	case 134:
		map[w.getLevel()][row][col] = 16;
		Draw();
		flag0 = Query134();
		if (flag0)
			map[w.getLevel()][row - 1][col] = 1;
		break;
	case 135:
		map[w.getLevel()][row][col] = 16;
		Draw();
		flag0 = Query135();
		break;
	case 136:
		map[w.getLevel()][row][col] = 16;
		Draw();
		flag0 = Query136();
		if (flag0)
			map[w.getLevel()][row - 1][col] = 1;
		break;
	case 137:
		map[w.getLevel()][row][col] = 16;
		Draw();
		flag0 = Query137();
		break;
	case 138:
		map[w.getLevel()][row][col] = 16;
		Draw();
		flag0 = Query138();
		if (flag0)
			map[w.getLevel()][row - 1][col] = 1;
		break;
	case 139:
		map[w.getLevel()][row][col] = 16;
		Draw();
		flag0 = Query139();
		if (flag0)
			map[w.getLevel()][row - 1][col] = 1;
		break;
	case 140:
		map[w.getLevel()][row][col] = 16;
		Draw();
		flag0 = Query140();
		if (flag0)
			map[w.getLevel()][row - 1][col] = 1;
		break;
	case 141:
		map[w.getLevel()][row][col] = 16;
		Draw();
		flag0 = Query141();
		if (flag0)
			map[w.getLevel()][row - 1][col] = 1;
		break;
	case 142:
		map[w.getLevel()][row][col] = 16;
		Draw();
		flag0 = Query142();
		if (flag0)
			map[w.getLevel()][row - 1][col] = 1;
		break;
	case 161:
		map[w.getLevel()][row][col] = 16;
		Draw();
		visitShop();
		break;
	case 163:
		Query163();
		map[w.getLevel()][row][col] = 16;
		break;
	case 164:
		Query164();
		map[w.getLevel()][row][col] = 16;
		break;
	default:
		map[w.getLevel()][row][col] = 16;
		Draw();
		ID = MessageBox(hwnd, _T("遇到了怪物，是否攻击？"), _T("提示"), MB_YESNO);
		bool isWin;
		if (ID == IDYES)
			isWin = w.Fight(Mlist[map[w.getLevel()][row - 1][col]]);
		else isWin = false;
		if (isWin)
			map[w.getLevel()][row - 1][col] = 1;
	}
}

void GameDown(int row, int col ){
	int ID;      
	bool flag0;
	hwnd = GetHWnd();    //弹窗前置
	switch (map[w.getLevel()][row + 1][col])
	{
	case 0: //遇到墙
	case 4: //遇到岩浆
	case 5: //遇到虚空
	case 9://遇到铁门
	case 160://遇到商店左
	case 162://遇到商店右
	case 10://遇到花门
		map[w.getLevel()][row][col] = 17;
		break;

	case 1: //人的前面是空地
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 2:	//人的前面是暗墙
		map[w.getLevel()][row + 1][col] = 1;
		map[w.getLevel()][row][col] = 17;
		break;
	case 3: //人的前面是(全向)隐形墙
		map[w.getLevel()][row + 1][col] = 0;
		map[w.getLevel()][row][col] = 17;
		break;
	case 6://遇到黄门
		if (w.getYellow_Key() == 0)
		{
			map[w.getLevel()][row][col] = 17;
			Draw();
			MessageBox(hwnd, _T("黄钥匙不足"), _T("提示"), MB_OK);
		}
		else
		{
			map[w.getLevel()][row + 1][col] = 1;
			map[w.getLevel()][row][col] = 17;
			w.Spend_Yellow_Key();
		}
		break;
	case 7://遇到蓝门
		if (w.getBlue_Key() == 0)
		{
			map[w.getLevel()][row][col] = 17;
			Draw();
			MessageBox(hwnd, _T("蓝钥匙不足"), _T("提示"), MB_OK);
		}
		else
		{
			map[w.getLevel()][row + 1][col] = 1;
			map[w.getLevel()][row][col] = 17;
			w.Spend_Blue_Key();
		}
		break;
	case 8://遇到红门
		if (w.getRed_Key() == 0)
		{
			map[w.getLevel()][row][col] = 17;
			Draw();
			MessageBox(hwnd, _T("红钥匙不足"), _T("提示"), MB_OK);
		}
		else
		{
			map[w.getLevel()][row + 1][col] = 1;
			map[w.getLevel()][row][col] = 17;
			w.Spend_Red_Key();
		}
		break;
	case 11:	// 遇到上楼梯
		w.LevelUp();
		if (w.getClevel() == 44)
			w.LevelUp();
		break;
	case 12:	// 遇到下楼梯
		w.LevelDown();
		if (w.getClevel() == 44)
			w.LevelDown();
		break;
	case 21:	// 黄钥匙
		w.Get_Yellow_Key();
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 22:	// 蓝钥匙
		w.Get_Blue_Key();
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 23:	// 红钥匙
		w.Get_Red_Key();
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 24:	// 红宝石
		w.Raise_Attack((w.getLevel() - 1) / 10 + 1);
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 25:	// 蓝宝石
		w.Raise_Defend((w.getLevel() - 1) / 10 + 1);
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 26:	// 红血瓶
		w.Raise_Hp(50 * (((w.getLevel() - 1) / 10) + 1));
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 27:	// 蓝血瓶
		w.Raise_Hp(200 * (((w.getLevel() - 1) / 10) + 1));
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 31:	// 铁剑
		w.Raise_Attack(10);
		w.SetSword(31);
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 32:	// 铁盾
		w.Raise_Defend(10);
		w.SetShield(32);
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 33:	// 银剑
		w.Raise_Attack(20);
		w.SetSword(33);
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 34:	// 银盾
		w.Raise_Defend(20);
		w.SetShield(34);
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 35:	
		w.Raise_Attack(40);
		w.SetSword(35);
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 36:	
		w.Raise_Defend(40);
		w.SetShield(36);
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 37:
		w.Raise_Attack(50);
		w.SetSword(37);
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 38:
		w.Raise_Defend(50);
		w.SetShield(38);
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 39:
		w.Raise_Attack(100);
		w.SetSword(40);
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		break;
	case 40:
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		Draw();
		w.Raise_Defend(100);
		MessageBox(hwnd, _T("获得神圣盾！(免疫魔法伤害)"), _T("提示"), MB_OK);
		w.SetShield(40);
		break;
	case 41:
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得传送法杖！按上下键可传送楼层（必须在楼梯边使用！）"), _T("提示"), MB_OK);
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 340, _T("上下键:楼层传送"));
		getConvey = true;
		break;
	case 42:
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得记事本！按N键可查看历史对话。"), _T("提示"), MB_OK);
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 360, _T("N:打开记事本"));
		getNotebook = true;
		break;
	case 44:
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得破墙镐！按T键使用，仅能使用一次。（可破坏四周的墙）"), _T(""), MB_OK);
		getAxe = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 400, _T("T:破墙镐  未使用"));
		break;
	case 45:
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得炸弹！按B键使用。(炸毁周围敌人，对boss无效。)"), _T("提示"), MB_OK);
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 455, _T("B:炸弹 未使用"));
		getBomb = true;
		break;
	case 46:
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得中心对称飞行器！按键使用，仅能使用三次。（飞到该层楼中心对称的位置，此位置必须是空地。）"), _T(""), MB_OK);
		getCentred_tp = 3;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 420, _T("F:中心对称飞行器"));
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 435, _T("剩余:"));
		outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 435, trans(getCentred_tp));
		break;
	case 47:
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得幸运金币！(与怪物对战时获得双倍金币)"), _T("提示"), MB_OK);
		getLuckyCoin = true;
		outtextxy(GAP * 2 + SIZE * NUM + 70, GAP + 485, _T("幸运金币"));
		break;
	case 48:
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得冰冻魔法！(R键消除四周的岩浆)"), _T("提示"), MB_OK);
		geticemagic = true;
		outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 475, _T("R:冰冻魔法"));
	case 49:
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得向下飞行器！(M键使用，可向下飞行至下一层楼梯处，一次性使用)"), _T("提示"), MB_OK);
		getflydown = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 495, _T("M:向下飞行 未使用"));
		break;
	case 50:
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得向上飞行器！(V键使用，可向上飞行至上一层楼梯处，一次性使用)"), _T("提示"), MB_OK);
		getflyup = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 515, _T("V:向上飞行 未使用"));
		break;
	case 51:
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得魔法钥匙！(K键使用，可清除当前一整层楼的黄门，一次性使用)"), _T("提示"), MB_OK);
		getmagickey = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 535, _T("K:魔法钥匙 未使用"));
		break;
	case 52:
		map[w.getLevel()][row + 1][col] = 17;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得屠龙匕！(对魔龙的伤害翻倍)"), _T("提示"), MB_OK);
		getdragonkiller = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 475, _T("屠龙匕"));
		break;
	case 94:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query94();
		break;
	case 95:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query95();
		break;
	case 96:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query96();
		break;
	case 97:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query97();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 98:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query98();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 100:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query100();
		break;
	case 105:	//6楼老人
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query105();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 106:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query106();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 108:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query108();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 109:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query109();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 110:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query110();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 111:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query111();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 112:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query112();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 113:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query113();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 114:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query114();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 115:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query115();
		map[w.getLevel()][row +	1][col] = 1;
		break;
	case 116:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query116();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 117:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query117();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 118:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Draw();
		Query118();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 119:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query119();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 120:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Query120();
		map[w.getLevel()][row + 1][col] = 1;
		break;
	case 132:
		map[w.getLevel()][row][col] = 17;
		Draw();
		flag0 = Query132();
		if (flag0)
			map[w.getLevel()][row + 1][col] = 1;
		break;
	case 133:
		map[w.getLevel()][row][col] = 17;
		Draw();
		flag0 = Query133();
		if (flag0)
			map[w.getLevel()][row + 1][col] = 1;
		break;
	case 134:
		map[w.getLevel()][row][col] = 17;
		Draw();
		flag0 = Query134();
		if (flag0)
			map[w.getLevel()][row + 1][col] = 1;
		break;
	case 135:
		map[w.getLevel()][row][col] = 17;
		Draw();
		flag0 = Query135();
		break;
	case 136:
		map[w.getLevel()][row][col] = 17;
		Draw();
		flag0 = Query136();
		if (flag0)
			map[w.getLevel()][row + 1][col] = 1;
		break;
	case 137:
		map[w.getLevel()][row][col] = 17;
		Draw();
		flag0 = Query137();
		break;
	case 138:
		map[w.getLevel()][row][col] = 17;
		Draw();
		flag0 = Query138();
		if (flag0)
			map[w.getLevel()][row + 1][col] = 1;
		break;
	case 139:
		map[w.getLevel()][row][col] = 17;
		Draw();
		flag0 = Query139();
		if (flag0)
			map[w.getLevel()][row + 1][col] = 1;
		break;
	case 140:
		map[w.getLevel()][row][col] = 17;
		Draw();
		flag0 = Query140();
		if (flag0)
			map[w.getLevel()][row + 1][col] = 1;
		break;
	case 141:
		map[w.getLevel()][row][col] = 17;
		Draw();
		flag0 = Query141();
		if (flag0)
			map[w.getLevel()][row + 1][col] = 1;
		break;
	case 142:
		map[w.getLevel()][row][col] = 17;
		Draw();
		Draw();
		flag0 = Query142();
		if (flag0)
			map[w.getLevel()][row + 1][col] = 1;
		break;
	case 163:
		Query163();
		map[w.getLevel()][row][col] = 17;
		break;
	default:
		map[w.getLevel()][row][col] = 17;
		Draw();
		ID = MessageBox(hwnd, _T("遇到了怪物，是否攻击？"), _T("提示"), MB_YESNO);
		bool isWin;
		if (ID == IDYES)
			isWin = w.Fight(Mlist[map[w.getLevel()][row + 1][col]]);
		else isWin = false;
		if (isWin)
			map[w.getLevel()][row + 1][col] = 1;
	}
}

void GameLeft(int row, int col) {
	hwnd = GetHWnd();    //弹窗前置
	int ID;
	bool flag0;
	switch (map[w.getLevel()][row][col - 1])
	{
	case 0: //遇到墙
	case 4: //遇到岩浆
	case 5: //遇到虚空
	case 9://遇到铁门
	case 160://遇到商店左
	case 162://遇到商店右
	case 10://遇到花门
		map[w.getLevel()][row][col] = 18;
		break;

	case 1: //人的前面是空地
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 2:	//人的前面是暗墙
		map[w.getLevel()][row][col] = 18;
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 3: //人的前面是(全向)隐形墙
		map[w.getLevel()][row][col] = 18;
		map[w.getLevel()][row][col - 1] = 0;
		break;
	case 6://遇到黄门
		if (w.getYellow_Key() == 0)
		{
			map[w.getLevel()][row][col] = 18;
			Draw();
			MessageBox(hwnd, _T("黄钥匙不足"), _T("提示"), MB_OK);
		}
		else
		{
			map[w.getLevel()][row][col - 1] = 1;
			map[w.getLevel()][row][col] = 18;
			w.Spend_Yellow_Key();
		}
		break;
	case 7://遇到蓝门
		if (w.getBlue_Key() == 0)
		{			
			map[w.getLevel()][row][col] = 18;
			Draw();
			MessageBox(hwnd, _T("蓝钥匙不足"), _T("提示"), MB_OK);
		}
		else
		{
			map[w.getLevel()][row][col - 1] = 1;
			map[w.getLevel()][row][col] = 18;
			w.Spend_Blue_Key();
		}
		break;
	case 8://遇到红门
		if (w.getRed_Key() == 0)
		{
			map[w.getLevel()][row][col] = 18;
			Draw();
			MessageBox(hwnd, _T("红钥匙不足"), _T("提示"), MB_OK);
		}
		else
		{
			map[w.getLevel()][row][col - 1] = 1;
			map[w.getLevel()][row][col] = 18;
			w.Spend_Red_Key();
		}
		break;
	case 11:	// 遇到上楼梯
		w.LevelUp();
		if (w.getClevel() == 44)
			w.LevelUp();
		break;
	case 12:	// 遇到下楼梯
		w.LevelDown();
		if (w.getClevel() == 44)
			w.LevelDown();
		break;
	case 21:	// 黄钥匙
		w.Get_Yellow_Key();
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 22:	// 蓝钥匙
		w.Get_Blue_Key();
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 23:	// 红钥匙
		w.Get_Red_Key();
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 24:	// 红宝石
		w.Raise_Attack((w.getLevel() - 1) / 10 + 1);
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 25:	// 蓝宝石
		w.Raise_Defend((w.getLevel() - 1) / 10 + 1);
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 26:	// 红血瓶
		w.Raise_Hp(50 * (((w.getLevel() - 1) / 10) + 1));
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 27:	// 蓝血瓶
		w.Raise_Hp(200 * (((w.getLevel() - 1) / 10) + 1));
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 31:	// 铁剑
		w.Raise_Attack(10);
		w.SetSword(31);
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 32:	// 铁盾
		w.Raise_Defend(10);
		w.SetShield(32);
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 33:	// 银剑
		w.Raise_Attack(20);
		w.SetSword(33);
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 34:	// 银盾
		w.Raise_Defend(20);
		w.SetShield(34);
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 35:	
		w.Raise_Attack(40);
		w.SetSword(36);
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 36:	
		w.Raise_Defend(40);
		w.SetShield(36);
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 37:
		w.Raise_Attack(50);
		w.SetSword(37);
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 38:
		w.Raise_Defend(50);
		w.SetShield(38);
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 39:
		w.Raise_Attack(100);
		w.SetSword(40);
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		break;
	case 40:
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		Draw();
		w.Raise_Defend(100);
		MessageBox(hwnd, _T("获得神圣盾！(免疫魔法伤害)"), _T("提示"), MB_OK);
		w.SetShield(40);
		break;
	case 41:
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得传送法杖！按上下键可传送楼层。（必须在楼梯边使用！）"), _T("提示"), MB_OK);
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 340, _T("上下键:楼层传送"));
		getConvey = true;
		break;
	case 42:
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得记事本！按N键可查看历史对话。"), _T("提示"), MB_OK);
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 360, _T("N:打开记事本"));
		getNotebook = true;
		break;
	case 45:
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得炸弹！按B键使用。(炸毁周围敌人，对boss无效。)"), _T("提示"), MB_OK);
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 455, _T("B:炸弹 未使用"));
		getBomb = true;
		break;
	case 44:
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得破墙镐！按T键使用，仅能使用一次。（可破坏四周的墙）"), _T("提示"), MB_OK);
		getAxe = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 400, _T("T:破墙镐 未使用"));
		break;
	case 46:
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得中心对称飞行器！按键使用，仅能使用三次。（飞到该层楼中心对称的位置，此位置必须是空地。）"), _T("提示"), MB_OK);
		getCentred_tp = 3;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 420, _T("F:中心对称飞行器"));
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 435, _T("剩余:"));
		outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 435, trans(getCentred_tp));
		
		break;
	case 47:
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得幸运金币！(与怪物对战时获得双倍金币)"), _T("提示"), MB_OK);
		getLuckyCoin = true;
		outtextxy(GAP * 2 + SIZE * NUM + 70, GAP + 485, _T("幸运金币"));
		break;
	case 48:
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得冰冻魔法！(R键消除四周的岩浆)"), _T("提示"), MB_OK);
		geticemagic = true;
		outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 475, _T("R:冰冻魔法"));
		break;
	case 49:
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得向下飞行器！(M键使用，可向下飞行至下一层楼梯处，一次性使用)"), _T("提示"), MB_OK);
		getflydown = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 495, _T("M:向下飞行 未使用"));
		
		break;
	case 50:
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得向上飞行器！(V键使用，可向上飞行至上一层楼梯处，一次性使用)"), _T("提示"), MB_OK);
		getflyup = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 515, _T("V:向上飞行 未使用"));
		
		break;
	case 51:
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得魔法钥匙！(K键使用，可清除当前一整层楼的黄门，一次性使用)"), _T("提示"), MB_OK);
		getmagickey = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 535, _T("K:魔法钥匙 未使用"));
		
		break;
	case 52:
		map[w.getLevel()][row][col - 1] = 18;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得屠龙匕！(对魔龙的伤害翻倍)"), _T("提示"), MB_OK);
		getdragonkiller = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 475, _T("屠龙匕"));
		break;
	case 94:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query94();
		break;
	case 95:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query95();
		break;
	case 96:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query96();
		break;
	case 99:	//4楼老人
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query99();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 100:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query100();
		break;
	case 104:	//4楼老人
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query104();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 105:	//6楼老人
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query105();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 106:	//6楼老人
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query106();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 108:	//6楼老人
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query108();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 109:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query109();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 110:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query110();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 111:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query111();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 112:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query112();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 113:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query113();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 114:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query114();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 115:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query115();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 116:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query116();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 117:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query117();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 118:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query118();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 119:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query119();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 120:
		map[w.getLevel()][row][col] = 18;
		Draw();
		Query120();
		map[w.getLevel()][row][col - 1] = 1;
		break;
	case 138:
		map[w.getLevel()][row][col] = 18;
		Draw();
		flag0 = Query138();
		if (flag0)
			map[w.getLevel()][row][col - 1] = 1;
		break;
	case 139:
		map[w.getLevel()][row][col] = 18;
		Draw();
		flag0 = Query139();
		if (flag0)
			map[w.getLevel()][row][col - 1] = 1;
		break;
	case 140:
		map[w.getLevel()][row][col] = 18;
		Draw();
		flag0 = Query140();
		if (flag0)
			map[w.getLevel()][row][col - 1] = 1;
		break;
	case 132:	// 6楼商人
		map[w.getLevel()][row][col] = 18;
		Draw();
		flag0 = Query132();
		if (flag0)
			map[w.getLevel()][row][col - 1] = 1;
		break;
	case 133:  // 7楼商人
		map[w.getLevel()][row][col] = 18;
		Draw();
		flag0 = Query133();
		if (flag0)
			map[w.getLevel()][row][col - 1] = 1;
		break;
	case 134:
		map[w.getLevel()][row][col] = 18;
		Draw();
		flag0 = Query134();
		if (flag0)
			map[w.getLevel()][row][col - 1] = 1;
		break;
	case 135:
		map[w.getLevel()][row][col] = 18;
		Draw();
		flag0 = Query135();
		break;
	case 136:
		map[w.getLevel()][row][col] = 18;
		Draw();
		flag0 = Query136();
		if (flag0)
			map[w.getLevel()][row][col - 1] = 1;
		break;
	case 137:
		map[w.getLevel()][row][col] = 18;
		Draw();
		flag0 = Query137();
		break;
	case 141:
		map[w.getLevel()][row][col] = 18;
		Draw();
		flag0 = Query141();
		if (flag0)
			map[w.getLevel()][row][col - 1] = 1;
		break;
	case 142:
		map[w.getLevel()][row][col] = 18;
		Draw();
		flag0 = Query142();
		if (flag0)
			map[w.getLevel()][row][col - 1] = 1;
		break;
	case 163:
		map[w.getLevel()][row][col] = 18;
		Query163();
		Draw();
		break;
	default:
		map[w.getLevel()][row][col] = 18;
		Draw();
		ID = MessageBox(hwnd, _T("遇到了怪物，是否攻击？"), _T(""), MB_YESNO);
		bool isWin;
		if (ID == IDYES)
			isWin = w.Fight(Mlist[map[w.getLevel()][row][col - 1]]);
		else isWin = false;
		if (isWin)
			map[w.getLevel()][row][col - 1] = 1;
	}
}

void GameRight(int row, int col) {
	hwnd = GetHWnd();    //弹窗前置
	int ID;
	bool flag0;
	switch (map[w.getLevel()][row][col + 1])
	{
	case 0: //遇到墙
	case 4: //遇到岩浆
	case 5: //遇到虚空
	case 9://遇到铁门
	case 160://遇到商店左
	case 162://遇到商店右
	case 10://遇到花门
		map[w.getLevel()][row][col] = 19;
		break;

	case 1: //人的前面是空地
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 2:	//人的前面是暗墙
		map[w.getLevel()][row][col] = 19;
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 3: //人的前面是(全向)隐形墙
		map[w.getLevel()][row][col] = 19;
		map[w.getLevel()][row][col + 1] = 0;
		break;
	case 6://遇到黄门
		if (w.getYellow_Key() == 0)
		{
			map[w.getLevel()][row][col] = 19;
			Draw();
			MessageBox(hwnd, _T("黄钥匙不足"), _T("提示"), MB_OK);
		}
		else
		{
			map[w.getLevel()][row][col + 1] = 1;
			map[w.getLevel()][row][col] = 19;
			w.Spend_Yellow_Key();
		}
		break;
	case 7://遇到蓝门
		if (w.getBlue_Key() == 0)
		{
			map[w.getLevel()][row][col] = 19;
			Draw();
			MessageBox(hwnd, _T("蓝钥匙不足"), _T("提示"), MB_OK);
		}
		else
		{
			map[w.getLevel()][row][col + 1] = 1;
			map[w.getLevel()][row][col] = 19;
			w.Spend_Blue_Key();
		}
		break;
	case 8://遇到红门
		if (w.getRed_Key() == 0)
		{
			map[w.getLevel()][row][col] = 19;
			Draw();
			MessageBox(hwnd, _T("红钥匙不足"), _T("提示"), MB_OK);
		}
		else
		{
			map[w.getLevel()][row][col + 1] = 1;
			map[w.getLevel()][row][col] = 19;
			w.Spend_Red_Key();
		}
		break;
	case 11:	// 遇到上楼梯
		w.LevelUp();
		if (w.getClevel() == 44)
			w.LevelUp();
		break;
	case 12:	// 遇到下楼梯
		w.LevelDown();
		if (w.getClevel() == 44)
			w.LevelDown();
		break;
	case 21:	// 黄钥匙
		w.Get_Yellow_Key();
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 22:	// 蓝钥匙
		w.Get_Blue_Key();
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 23:	// 红钥匙
		w.Get_Red_Key();
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 24:	// 红宝石
		w.Raise_Attack((w.getLevel() - 1) / 10 + 1);
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 25:	// 蓝宝石
		w.Raise_Defend((w.getLevel() - 1) / 10 + 1);
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 26:	// 红血瓶
		w.Raise_Hp(50 * (((w.getLevel() - 1) / 10) + 1));
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 27:	// 蓝血瓶
		w.Raise_Hp(200 * (((w.getLevel() - 1) / 10) + 1));
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 31:	// 铁剑
		w.Raise_Attack(10);
		w.SetSword(31);
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 32:	// 铁盾
		w.Raise_Defend(10);
		w.SetShield(32);
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 33:	
		w.Raise_Attack(20);
		w.SetSword(34);
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 34:	
		w.Raise_Defend(20);
		w.SetShield(34);
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 35:
		w.Raise_Attack(40);
		w.SetSword(35);
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 36:
		w.Raise_Defend(40);
		w.SetShield(36);
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 37:
		w.Raise_Attack(50);
		w.SetSword(37);
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 38:
		w.Raise_Defend(50);
		w.SetShield(38);
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 39:
		w.Raise_Attack(100);
		w.SetSword(40);
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		break;
	case 40:
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		Draw();
		w.Raise_Defend(100);
		MessageBox(hwnd, _T("获得神圣盾！(免疫魔法伤害)"), _T("提示"), MB_OK);
		w.SetShield(40);
		break;
	case 41:
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得传送法杖！按上下键可传送楼层（必须在楼梯边使用！）"), _T("提示"), MB_OK);
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 340, _T("上下:楼层传送"));
		getConvey = true;
		break;
	case 42:
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得记事本！按F键可查看历史对话。"), _T("提示"), MB_OK);
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 360, _T("N:打开记事本"));
		getNotebook = true;
		break;
	case 44:
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得破墙镐！按T键使用，仅能使用一次。（可破坏四周的墙）"), _T(""), MB_OK);
		getAxe = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 400, _T("T:破墙镐 未使用"));
		
		break;
	case 45:
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得炸弹！按B键使用。(炸毁周围敌人，对boss无效。)"), _T("提示"), MB_OK);
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 455, _T("B:炸弹 未使用"));
		getBomb = true;
		break;
	case 46:
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得中心对称飞行器！按键使用，仅能使用三次。（飞到该层楼中心对称的位置，此位置必须是空地。）"), _T("提示"), MB_OK);
		getCentred_tp = 3;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 420, _T("F:中心对称飞行器"));
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 435, _T("剩余:"));
		outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 435, trans(getCentred_tp));
		break;
	case 47:
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得幸运金币！(与怪物对战时获得双倍金币)"), _T("提示"), MB_OK);
		getLuckyCoin = true;
		outtextxy(GAP * 2 + SIZE * NUM + 70, GAP + 485, _T("幸运金币"));
		break;
	case 48:
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得冰冻魔法！(R键消除四周的岩浆)"), _T("提示"), MB_OK);
		geticemagic = true;
		outtextxy(GAP * 2 + SIZE * NUM + 60, GAP + 475, _T("R:冰冻魔法"));
		
		break;
	case 49:
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得向下飞行器！(M键使用，可向下飞行至下一层楼梯处，一次性使用)"), _T("提示"), MB_OK);
		getflydown = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 495, _T("M:向下飞行 未使用"));
		break;
	case 50:
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得向上飞行器！(V键使用，可向上飞行至上一层楼梯处，一次性使用)"), _T("提示"), MB_OK);
		getflyup = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 515, _T("V:向上飞行 未使用"));
		break;
	case 51:
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得魔法钥匙！(K键使用，可清除当前一整层楼的黄门，一次性使用)"), _T("提示"), MB_OK);
		getmagickey = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 535, _T("K:魔法钥匙 未使用"));
		
		break;
	case 52:
		map[w.getLevel()][row][col + 1] = 19;
		map[w.getLevel()][row][col] = 1;
		Draw();
		MessageBox(hwnd, _T("获得屠龙匕！(对魔龙的伤害翻倍)"), _T("提示"), MB_OK);
		getdragonkiller = true;
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 475, _T("屠龙匕"));
		
		break;
	case 94:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query94();
		break;
	case 95:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query95();
		break;
	case 96:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query96();
		break;
	case 99:	
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query99();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 100:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query100();
		break;
	case 102:
		map[w.getLevel()][row][col] = 19;
		Draw();
		flag0 = Query102();
		if (flag0)
			map[w.getLevel()][row][col + 1] = 1;
		break;
	case 103:	//怪物手册，3F的指引者
		Query103();
		Draw();
		outtextxy(GAP * 2 + SIZE * NUM + 10, GAP + 320, _T("Q:查看怪物手册"));
		map[w.getLevel()][row][col] = 19;
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 104:	//4楼老人
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query104();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 105:	//6楼老人
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query105();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 108:	//6楼老人
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query108();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 109:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query109();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 110:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query110();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 111:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query111();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 112:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query112();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 113:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query113();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 114:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query114();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 115:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query115();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 116:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query116();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 117:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query117();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 118:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query118();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 119:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query119();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 120:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query120();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 131:
		map[w.getLevel()][row][col] = 19;
		Draw();
		Query131();
		map[w.getLevel()][row][col + 1] = 1;
		break;
	case 132:	// 6楼商人
		map[w.getLevel()][row][col] = 19;
		Draw();
		flag0 = Query132();
		if (flag0)
			map[w.getLevel()][row][col + 1] = 1;
		break;
	case 133:  // 7楼商人
		map[w.getLevel()][row][col] = 19;
		Draw();
		flag0 = Query133();
		if (flag0)
			map[w.getLevel()][row][col + 1] = 1;
		break;
	case 134:  
		map[w.getLevel()][row][col] = 19;
		Draw();
		flag0 = Query134();
		if (flag0)
			map[w.getLevel()][row][col + 1] = 1;
		break;
	case 135:  
		map[w.getLevel()][row][col] = 19;
		Draw();
		flag0 = Query135();
		break;
	case 137:
		map[w.getLevel()][row][col] = 19;
		Draw();
		flag0 = Query137();
		break;
	case 136:
		map[w.getLevel()][row][col] = 19;
		Draw();
		flag0 = Query136();
		if (flag0)
			map[w.getLevel()][row][col + 1] = 1;
		break;
	case 138:
		map[w.getLevel()][row][col] = 19;
		Draw();
		flag0 = Query138();
		if (flag0)
			map[w.getLevel()][row][col + 1] = 1;
		break;
	case 139:
		map[w.getLevel()][row][col] = 19;
		Draw();
		flag0 = Query139();
		if (flag0)
			map[w.getLevel()][row][col + 1] = 1;
		break;
	case 140:
		map[w.getLevel()][row][col] = 19;
		Draw();
		flag0 = Query140();
		if (flag0)
			map[w.getLevel()][row][col + 1] = 1;
		break;
	case 141:
		Draw();
		map[w.getLevel()][row][col] = 19;
		flag0 = Query141();
		if (flag0)
			map[w.getLevel()][row][col + 1] = 1;
		break;
	case 142:
		map[w.getLevel()][row][col] = 19;
		Draw();
		flag0 = Query142();
		if (flag0)
			map[w.getLevel()][row][col + 1] = 1;
		break;
	case 163:
		Query163();
		map[w.getLevel()][row][col] = 19;
		break;
	default:
		map[w.getLevel()][row][col] = 19;
		Draw();
		ID = MessageBox(hwnd, _T("遇到了怪物，是否攻击？"), _T("提示"), MB_YESNO);
		bool isWin;
		if (ID == IDYES)
			isWin = w.Fight(Mlist[map[w.getLevel()][row][col + 1]]);
		else isWin = false;
		if (isWin)
			map[w.getLevel()][row][col + 1] = 1;
	}
}

void queryBook()
{
	//if (!query103)	return;
	solidrectangle(GAP + 50, GAP + 75, GAP + 600, GAP + 750);
	rectangle(GAP + 50, GAP + 75, GAP + 600, GAP + 750);
	outtextxy(GAP + 55, GAP + 80, _T("怪物手册："));
	outtextxy(GAP + 55, GAP + 100, _T(" 怪物名称      攻击力      防御力      生命值      金钱      损失"));
	int y0 = GAP + 120;
	bool st[100];
	memset(st, 0, sizeof st);	
	// 初始化st数组
	for (int i = 0; i < NUM + 2; i ++)
			for (int j = 0; j < NUM + 2; j++)
				if (map[w.getClevel()][i][j] > 250)
					st[map[w.getClevel()][i][j] - 250] = true;
	int loss;

	if (st[1])
	{
		loss = CalculateLoss(Mlist[251]);
		outtextxy(GAP + 55, y0, _T("绿色史莱姆"));
		outtextxy(GAP + 190, y0, trans(gslime.getAttack()));
		outtextxy(GAP + 290, y0, trans(gslime.getDefend()));
		outtextxy(GAP + 380, y0, trans(gslime.getHp()));
		outtextxy(GAP + 475, y0, trans(gslime.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if(loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[2])
	{
		loss = CalculateLoss(Mlist[252]);
		outtextxy(GAP + 55, y0, _T("红色史莱姆"));
		outtextxy(GAP + 190, y0, trans(rslime.getAttack()));
		outtextxy(GAP + 290, y0, trans(rslime.getDefend()));
		outtextxy(GAP + 380, y0, trans(rslime.getHp()));
		outtextxy(GAP + 475, y0, trans(rslime.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[3])
	{
		loss = CalculateLoss(Mlist[253]);
		outtextxy(GAP + 55, y0, _T("小蝙蝠"));
		outtextxy(GAP + 190, y0, trans(sbat.getAttack()));
		outtextxy(GAP + 290, y0, trans(sbat.getDefend()));
		outtextxy(GAP + 380, y0, trans(sbat.getHp()));
		outtextxy(GAP + 475, y0, trans(sbat.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[4])
	{
		loss = CalculateLoss(Mlist[254]);
		outtextxy(GAP + 55, y0, _T("初级法师"));
		outtextxy(GAP + 190, y0, trans(priwiz.getAttack()));
		outtextxy(GAP + 290, y0, trans(priwiz.getDefend()));
		outtextxy(GAP + 380, y0, trans(priwiz.getHp()));
		outtextxy(GAP + 475, y0, trans(priwiz.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[5])
	{
		loss = CalculateLoss(Mlist[255]);
		outtextxy(GAP + 55, y0, _T("骷髅"));
		outtextxy(GAP + 190, y0, trans(skull.getAttack()));
		outtextxy(GAP + 290, y0, trans(skull.getDefend()));
		outtextxy(GAP + 380, y0, trans(skull.getHp()));
		outtextxy(GAP + 475, y0, trans(skull.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[6])
	{
		loss = CalculateLoss(Mlist[256]);
		outtextxy(GAP + 55, y0, _T("骷髅士兵"));
		outtextxy(GAP + 190, y0, trans(bskull.getAttack()));
		outtextxy(GAP + 290, y0, trans(bskull.getDefend()));
		outtextxy(GAP + 380, y0, trans(bskull.getHp()));
		outtextxy(GAP + 475, y0, trans(bskull.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[7])
	{
		loss = CalculateLoss(Mlist[257]);
		outtextxy(GAP + 55, y0, _T("初级卫兵"));
		outtextxy(GAP + 190, y0, trans(pridefender.getAttack()));
		outtextxy(GAP + 290, y0, trans(pridefender.getDefend()));
		outtextxy(GAP + 380, y0, trans(pridefender.getHp()));
		outtextxy(GAP + 475, y0, trans(pridefender.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[8])
	{
		loss = CalculateLoss(Mlist[258]);
		outtextxy(GAP + 55, y0, _T("骷髅队长"));
		outtextxy(GAP + 190, y0, trans(kskull.getAttack()));
		outtextxy(GAP + 290, y0, trans(kskull.getDefend()));
		outtextxy(GAP + 380, y0, trans(kskull.getHp()));
		outtextxy(GAP + 475, y0, trans(kskull.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[9])
	{
		loss = CalculateLoss(Mlist[259]);
		outtextxy(GAP + 55, y0, _T("大史莱姆"));
		outtextxy(GAP + 190, y0, trans(bigsilme.getAttack()));
		outtextxy(GAP + 290, y0, trans(bigsilme.getDefend()));
		outtextxy(GAP + 380, y0, trans(bigsilme.getHp()));
		outtextxy(GAP + 475, y0, trans(bigsilme.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[10])
	{
		loss = CalculateLoss(Mlist[260]);
		outtextxy(GAP + 55, y0, _T("大蝙蝠"));
		outtextxy(GAP + 190, y0, trans(bigbat.getAttack()));
		outtextxy(GAP + 290, y0, trans(bigbat.getDefend()));
		outtextxy(GAP + 380, y0, trans(bigbat.getHp()));
		outtextxy(GAP + 475, y0, trans(bigbat.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[11])
	{
		loss = CalculateLoss(Mlist[261]);
		outtextxy(GAP + 55, y0, _T("高级法师"));
		outtextxy(GAP + 190, y0, trans(senwiz.getAttack()));
		outtextxy(GAP + 290, y0, trans(senwiz.getDefend()));
		outtextxy(GAP + 380, y0, trans(senwiz.getHp()));
		outtextxy(GAP + 475, y0, trans(senwiz.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[12])
	{
		loss = CalculateLoss(Mlist[262]);
		outtextxy(GAP + 55, y0, _T("兽人"));
		outtextxy(GAP + 190, y0, trans(orc.getAttack()));
		outtextxy(GAP + 290, y0, trans(orc.getDefend()));
		outtextxy(GAP + 380, y0, trans(orc.getHp()));
		outtextxy(GAP + 475, y0, trans(orc.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[13])
	{
		loss = CalculateLoss(Mlist[263]);
		outtextxy(GAP + 55, y0, _T("兽人武士"));
		outtextxy(GAP + 190, y0, trans(great_orc.getAttack()));
		outtextxy(GAP + 290, y0, trans(great_orc.getDefend()));
		outtextxy(GAP + 380, y0, trans(great_orc.getHp()));
		outtextxy(GAP + 475, y0, trans(great_orc.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[14])
	{
		loss = CalculateLoss(Mlist[264]);
		outtextxy(GAP + 55, y0, _T("石头人"));
		outtextxy(GAP + 190, y0, trans(stone_man.getAttack()));
		outtextxy(GAP + 290, y0, trans(stone_man.getDefend()));
		outtextxy(GAP + 380, y0, trans(stone_man.getHp()));
		outtextxy(GAP + 475, y0, trans(stone_man.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[15])
	{
		loss = CalculateLoss(Mlist[265]);
		outtextxy(GAP + 55, y0, _T("吸血鬼"));
		outtextxy(GAP + 190, y0, trans(vampire.getAttack()));
		outtextxy(GAP + 290, y0, trans(vampire.getDefend()));
		outtextxy(GAP + 380, y0, trans(vampire.getHp()));
		outtextxy(GAP + 475, y0, trans(vampire.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[16])
	{
		loss = CalculateLoss(Mlist[266]);
		outtextxy(GAP + 55, y0, _T("鬼骑士"));
		outtextxy(GAP + 190, y0, trans(skwrr.getAttack()));
		outtextxy(GAP + 290, y0, trans(skwrr.getDefend()));
		outtextxy(GAP + 380, y0, trans(skwrr.getHp()));
		outtextxy(GAP + 475, y0, trans(skwrr.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[17])
	{
		loss = CalculateLoss(Mlist[267]);
		outtextxy(GAP + 55, y0, _T("战士"));
		outtextxy(GAP + 190, y0, trans(wrr.getAttack()));
		outtextxy(GAP + 290, y0, trans(wrr.getDefend()));
		outtextxy(GAP + 380, y0, trans(wrr.getHp()));
		outtextxy(GAP + 475, y0, trans(wrr.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[18])
	{
		loss = CalculateLoss(Mlist[268]);
		outtextxy(GAP + 55, y0, _T("幽灵"));
		outtextxy(GAP + 190, y0, trans(ghost.getAttack()));
		outtextxy(GAP + 290, y0, trans(ghost.getDefend()));
		outtextxy(GAP + 380, y0, trans(ghost.getHp()));
		outtextxy(GAP + 475, y0, trans(ghost.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[19])
	{
		loss = CalculateLoss(Mlist[269]);
		outtextxy(GAP + 55, y0, _T("中级卫兵"));
		outtextxy(GAP + 190, y0, trans(meddefender.getAttack()));
		outtextxy(GAP + 290, y0, trans(meddefender.getDefend()));
		outtextxy(GAP + 380, y0, trans(meddefender.getHp()));
		outtextxy(GAP + 475, y0, trans(meddefender.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[20])
	{
		loss = CalculateLoss(Mlist[270]);
		outtextxy(GAP + 55, y0, _T("双手剑士"));
		outtextxy(GAP + 190, y0, trans(brisword.getAttack()));
		outtextxy(GAP + 290, y0, trans(brisword.getDefend()));
		outtextxy(GAP + 380, y0, trans(brisword.getHp()));
		outtextxy(GAP + 475, y0, trans(brisword.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[21])
	{
		loss = CalculateLoss(Mlist[271]);
		outtextxy(GAP + 55, y0, _T("骑士"));
		outtextxy(GAP + 190, y0, trans(knight.getAttack()));
		outtextxy(GAP + 290, y0, trans(knight.getDefend()));
		outtextxy(GAP + 380, y0, trans(knight.getHp()));
		outtextxy(GAP + 475, y0, trans(knight.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[22])
	{
		loss = CalculateLoss(Mlist[272]);
		outtextxy(GAP + 55, y0, _T("骑士队长"));
		outtextxy(GAP + 190, y0, trans(knightleader.getAttack()));
		outtextxy(GAP + 290, y0, trans(knightleader.getDefend()));
		outtextxy(GAP + 380, y0, trans(knightleader.getHp()));
		outtextxy(GAP + 475, y0, trans(knightleader.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[32])
	{
		loss = CalculateLoss(Mlist[282]);
		outtextxy(GAP + 55, y0, _T("大法师"));
		outtextxy(GAP + 190, y0, trans(great_wiz.getAttack()));
		outtextxy(GAP + 290, y0, trans(great_wiz.getDefend()));
		outtextxy(GAP + 380, y0, trans(great_wiz.getHp()));
		outtextxy(GAP + 475, y0, trans(great_wiz.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[41])
	{
		loss = CalculateLoss(Mlist[291]);
		outtextxy(GAP + 55, y0, _T("大乌贼"));
		outtextxy(GAP + 190, y0, trans(octopus.getAttack()));
		outtextxy(GAP + 290, y0, trans(octopus.getDefend()));
		outtextxy(GAP + 380, y0, trans(octopus.getHp()));
		outtextxy(GAP + 475, y0, trans(octopus.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[50])
	{
		loss = CalculateLoss(Mlist[300]);
		outtextxy(GAP + 55, y0, _T("魔龙"));
		outtextxy(GAP + 190, y0, trans(dragon.getAttack()));
		outtextxy(GAP + 290, y0, trans(dragon.getDefend()));
		outtextxy(GAP + 380, y0, trans(dragon.getHp()));
		outtextxy(GAP + 475, y0, trans(dragon.getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}//302初级巫师 303高级巫师 304史莱姆王 305吸血蝙蝠 306黑暗骑士 307魔法警卫 308高级卫兵
	if (st[52])
	{
		loss = CalculateLoss(Mlist[302]);
		outtextxy(GAP + 55, y0, _T("初级巫师"));
		outtextxy(GAP + 190, y0, trans(Mlist[302].getAttack()));
		outtextxy(GAP + 290, y0, trans(Mlist[302].getDefend()));
		outtextxy(GAP + 380, y0, trans(Mlist[302].getHp()));
		outtextxy(GAP + 475, y0, trans(Mlist[302].getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[53])
	{
		loss = CalculateLoss(Mlist[303]);
		outtextxy(GAP + 55, y0, _T("高级巫师"));
		outtextxy(GAP + 190, y0, trans(Mlist[303].getAttack()));
		outtextxy(GAP + 290, y0, trans(Mlist[303].getDefend()));
		outtextxy(GAP + 380, y0, trans(Mlist[303].getHp()));
		outtextxy(GAP + 475, y0, trans(Mlist[303].getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[54])
	{
		loss = CalculateLoss(Mlist[304]);
		outtextxy(GAP + 55, y0, _T("史莱姆王"));
		outtextxy(GAP + 190, y0, trans(Mlist[304].getAttack()));
		outtextxy(GAP + 290, y0, trans(Mlist[304].getDefend()));
		outtextxy(GAP + 380, y0, trans(Mlist[304].getHp()));
		outtextxy(GAP + 475, y0, trans(Mlist[304].getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[55])
	{
		loss = CalculateLoss(Mlist[305]);
		outtextxy(GAP + 55, y0, _T("吸血蝙蝠"));
		outtextxy(GAP + 190, y0, trans(Mlist[305].getAttack()));
		outtextxy(GAP + 290, y0, trans(Mlist[305].getDefend()));
		outtextxy(GAP + 380, y0, trans(Mlist[305].getHp()));
		outtextxy(GAP + 475, y0, trans(Mlist[305].getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[56])
	{
		loss = CalculateLoss(Mlist[306]);
		outtextxy(GAP + 55, y0, _T("黑暗骑士"));
		outtextxy(GAP + 190, y0, trans(Mlist[306].getAttack()));
		outtextxy(GAP + 290, y0, trans(Mlist[306].getDefend()));
		outtextxy(GAP + 380, y0, trans(Mlist[306].getHp()));
		outtextxy(GAP + 475, y0, trans(Mlist[306].getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[57])
	{
		loss = CalculateLoss(Mlist[307]);
		outtextxy(GAP + 55, y0, _T("魔法警卫"));
		outtextxy(GAP + 190, y0, trans(Mlist[307].getAttack()));
		outtextxy(GAP + 290, y0, trans(Mlist[307].getDefend()));
		outtextxy(GAP + 380, y0, trans(Mlist[307].getHp()));
		outtextxy(GAP + 475, y0, trans(Mlist[307].getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[58])
	{
		loss = CalculateLoss(Mlist[308]);
		outtextxy(GAP + 55, y0, _T("高级卫兵"));
		outtextxy(GAP + 190, y0, trans(Mlist[308].getAttack()));
		outtextxy(GAP + 290, y0, trans(Mlist[308].getDefend()));
		outtextxy(GAP + 380, y0, trans(Mlist[308].getHp()));
		outtextxy(GAP + 475, y0, trans(Mlist[308].getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[31])
	{
		loss = CalculateLoss(Mlist[281]);
		outtextxy(GAP + 55, y0, _T("魔王"));
		outtextxy(GAP + 190, y0, trans(Mlist[281].getAttack()));
		outtextxy(GAP + 290, y0, trans(Mlist[281].getDefend()));
		outtextxy(GAP + 380, y0, trans(Mlist[281].getHp()));
		outtextxy(GAP + 475, y0, trans(Mlist[281].getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[30])
	{
		loss = CalculateLoss(Mlist[280]);
		outtextxy(GAP + 55, y0, _T("魔王"));
		outtextxy(GAP + 190, y0, trans(Mlist[280].getAttack()));
		outtextxy(GAP + 290, y0, trans(Mlist[280].getDefend()));
		outtextxy(GAP + 380, y0, trans(Mlist[280].getHp()));
		outtextxy(GAP + 475, y0, trans(Mlist[280].getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	if (st[33])
	{
		loss = CalculateLoss(Mlist[283]);
		outtextxy(GAP + 55, y0, _T("魔王zeno"));
		outtextxy(GAP + 190, y0, trans(Mlist[283].getAttack()));
		outtextxy(GAP + 290, y0, trans(Mlist[283].getDefend()));
		outtextxy(GAP + 380, y0, trans(Mlist[283].getHp()));
		outtextxy(GAP + 475, y0, trans(Mlist[283].getMoney()));
		if (loss == 0)
			outtextxy(GAP + 545, y0, _T("无危险"));
		else if (loss == -1)
			outtextxy(GAP + 545, y0, _T("不可攻击"));
		else
			outtextxy(GAP + 545, y0, trans(loss));
		y0 += 20;
	}
	outtextxy(GAP + 55, y0, _T("按Enter键返回游戏"));
	while (1)
	{
		char con;
		con = _getch();
		if (con == 13) { break; }
	}
	
}

void checkNotebook()
{
	if (!getNotebook)	return;
	solidrectangle(GAP + 50, GAP + 75, GAP + 600, GAP + 750);
	rectangle(GAP + 50, GAP + 75, GAP + 600, GAP + 750);
	outtextxy(GAP + 55, GAP + 80, _T("记事本："));
	int y0 = GAP + 100;
	if (query97)
	{
		outtextxy(GAP + 55, y0, _T("你的剑的盾被警卫拿走了，但是我知道铁剑在5楼，铁盾在9楼"));
		y0 += 20;
	}
	if (query104)
	{
		outtextxy(GAP + 55, y0, _T("有些门不能用钥匙打开，只有当你打败它的守卫后才会自动打开。"));
		y0 += 20;
	}
	if (query105)
	{
		outtextxy(GAP + 55, y0, _T("你购买了礼物后再与商人对话，他会告诉你一些重要的信息。"));
		y0 += 20;
	}
	if (query132)
	{
		outtextxy(GAP + 55, y0, _T("这座塔一共50层，每10层为一个区域。如果不打败此区域的头目，就不能到达更高的地方。"));
		y0 += 20;
	}
	if (query133)
	{
		outtextxy(GAP + 55, y0, _T("在商店里你最好选择提升防御，只有在攻击力低于敌人的防御力时才提升攻击力。"));
		y0 += 20;
	}
	if (query98 && w.getClevel() <= 10)
	{
		outtextxy(GAP + 55, y0, _T("你的剑的盾被警卫拿走了，但是我知道铁剑在5楼，铁盾在9楼"));
		y0 += 20;
	}
	if (query134)
	{
		outtextxy(GAP + 55, y0, _T("你是否注意到5，9，14，16，18，36，41楼有的墙与众不同？"));
		y0 += 20;
	}
	if (query136 && w.getClevel() <= 20)
	{
		outtextxy(GAP + 55, y0, _T("如果你持有十字架，面对兽人和吸血鬼时你的攻击力加倍。"));
		y0 += 20;
		outtextxy(GAP + 55, y0, _T("在没有十字架的情况下你不可能打败吸血鬼。十字架被藏在高于15楼的墙内。"));
		y0 += 20; 
	}
	if (query106)
	{
		outtextxy(GAP + 55, y0, _T("我听说在塔内有2把隐藏的红钥匙。"));
		y0 += 20;
	}
	if (query108 && w.getClevel() <= 20)
	{
		outtextxy(GAP + 55, y0, _T("在这区域不多次提升攻击力，就不能打败石头人。切记前人教训！"));
		y0 += 20;
	}
	if (bossevent2_2)
	{
		outtextxy(GAP + 55, y0, _T("你现在的状态对于大法师来说太弱了，你仅仅取得了一个暂时的胜利。"));
		y0 += 20;
	}
	if (query109)
	{
		outtextxy(GAP + 55, y0, _T("大法师住在25楼，他是这座塔的主人。以你现在的状态去攻击他简直就是自杀。"));
		y0 += 20;
	}
	if (query110 && w.getClevel() <= 30)
	{
		outtextxy(GAP + 55, y0, _T("我没有什么可说的，但有一个确切的消息藏在23楼里。"));
		y0 += 20;
	}
	if (query111 && w.getClevel() <= 30)
	{
		outtextxy(GAP + 55, y0, _T("如果你到27楼时状态为：生命1500，攻击80，防御98，拥有1蓝钥匙，5黄钥匙。"));
		y0 += 20;
		outtextxy(GAP + 55, y0, _T("那么祝贺你，你前期是比较成功的。"));
		y0 += 20;
	}
	if (query112 && w.getClevel() <= 40)
	{
		outtextxy(GAP + 55, y0, _T("双手剑士的攻击力太高了，你最好到能对他一击必杀时再与他战斗。"));
		y0 += 20; 
	}
	if (query113 && w.getClevel() <= 40)
	{
		outtextxy(GAP + 55, y0, _T("别匆忙，放慢速度。"));
		y0 += 20;
	}
	if (query114)
	{
		outtextxy(GAP + 55, y0, _T("如果你能用好移动飞行宝物，你不用与强敌作战就能拿到想要的东西。"));
		y0 += 20;
	}
	if (query115)
	{
		outtextxy(GAP + 55, y0, _T("你需要用地震卷轴取出37楼仓库内的所有宝物。"));
		y0 += 20;
	}
	if (query116)
	{
		outtextxy(GAP + 55, y0, _T("谜题：“在3点，拥有传送功能的密宝就会出现。”"));
		y0 += 20;
	}
	if (query117)
	{
		outtextxy(GAP + 55, y0, _T("巫师会用魔法攻击路过的人，在2个魔法警卫间通过会使你的生命减少一半。"));
		y0 += 20;
	}
	if (query118)
	{
		outtextxy(GAP + 55, y0, _T("44楼被藏在异空间，你只能用密宝才能到达。"));
		y0 += 20;
	}
	if (query119)
	{
		outtextxy(GAP + 55, y0, _T("41楼事实上是左右对称的。"));
		y0 += 20;
	}
	if (query120)
	{
		outtextxy(GAP + 55, y0, _T("像骰子上5的形状是一种封印魔法，你最好记住它在你与49楼假魔王战斗时有用。"));
		y0 += 20;
	}
	if (query139)
	{
		outtextxy(GAP + 55, y0, _T("卫兵系的怪物一定是守着机关门的，而且每个机关门在对应的层都有守门人，所以说……"));
		y0 += 20;
	}
	if (query140)
	{
		outtextxy(GAP + 55, y0, _T("塔内有个幸运金币。拥有它在打败敌人后能获得2倍的金钱。"));
		y0 += 20;
	}
	if (query95 && w.getClevel() <= 40)
	{
		outtextxy(GAP + 55, y0, _T("我听说骑士队长实力差有又吹牛，所以被魔法警卫们讨厌。"));
		y0 += 20;
		outtextxy(GAP + 55, y0, _T("40楼是禁飞区，你不能在40楼用中心对称飞行器。"));
		y0 += 20;
	}
	if (query141)
	{
		outtextxy(GAP + 55, y0, _T("神圣盾能防御魔法攻击，但它被藏在异空间的楼层内。听说这座塔中有3个异空间。"));
		y0 += 20;
	}
	if (query142)
	{
		outtextxy(GAP + 55, y0, _T("如果要打败魔龙你需要圣剑、圣盾、屠龙匕或更高等级的装备。"));
		y0 += 20;
	}
	outtextxy(GAP + 55, y0, _T("按Enter键返回游戏"));
	char con;
	while (1)
	{
		con = _getch();
		if (con == 13)  break;
	}
}

int CalculateLoss(Monster m)
{
	int loss;
	if (m.getDefend() < w.getAttack())
	{
		if (m.getAttack() <= w.getDefend())
			loss = 0;
		else if ( (m.afraid_cross() || m.afraid_dragon_killer()) && getCross)
		{
			loss = floor(1.0 * m.getHp() / (2 * w.getAttack() - m.getDefend()))* (m.getAttack() - w.getDefend());
		}
		else
		{
			loss = floor(1.0 * (m.getHp() - 1) / (w.getAttack() - m.getDefend())) * (m.getAttack() - w.getDefend());
		}	
	}
	else loss = -1;
	return loss;
}

void Judge_magic()
{
	int x, y;
	FindRole(x, y);
	if (w.getShield() != 40 && map[w.getClevel()][x - 1][y] == 307 && map[w.getClevel()][x + 1][y] == 307)
	{
		w.Lose_Hp(w.getHp() / 2);
		MessageBox(hwnd, _T("受到夹击，生命值减少一半！"), _T("提示"), MB_OK);
	}
	if (w.getShield() != 40 && map[w.getClevel()][x][y - 1] == 307 && map[w.getClevel()][x][y + 1] == 307)
	{
		w.Lose_Hp(w.getHp() / 2);
		MessageBox(hwnd, _T("受到夹击，生命值减少一半！"), _T("提示"), MB_OK);
	}
	if (w.getShield() != 40 && (map[w.getClevel()][x - 1][y] == 302 || map[w.getClevel()][x + 1][y] == 302
		|| map[w.getClevel()][x][y - 1] == 302 || map[w.getClevel()][x][y + 1] == 302))
	{
		w.Lose_Hp(100);
		MessageBox(hwnd, _T("受到魔法攻击，生命值减少100！"), _T("提示"), MB_OK);
	}
	if (w.getShield() != 40 && map[w.getClevel()][x - 1][y] == 303)
	{
		w.Lose_Hp(200);
		MessageBox(hwnd, _T("受到魔法攻击，生命值减少200！"), _T("提示"), MB_OK);
		if (map[w.getClevel()][x - 2][y] == 1)
		{
			map[w.getClevel()][x - 1][y] = 1;
			map[w.getClevel()][x - 2][y] = 303;
		}
	}
	if (w.getShield() != 40 && map[w.getClevel()][x + 1][y] == 303)
	{
		w.Lose_Hp(200);
		MessageBox(hwnd, _T("受到魔法攻击，生命值减少200！"), _T("提示"), MB_OK);
		if (map[w.getClevel()][x + 2][y] == 1)
		{
			map[w.getClevel()][x + 1][y] = 1;
			map[w.getClevel()][x + 2][y] = 303;
		}
	}
	if (w.getShield() != 40 && map[w.getClevel()][x][y - 1] == 303)
	{
		w.Lose_Hp(200);
		MessageBox(hwnd, _T("受到魔法攻击，生命值减少200！"), _T("提示"), MB_OK);
		if (map[w.getClevel()][x][y - 2] == 1)
		{
			map[w.getClevel()][x][y - 1] = 1;
			map[w.getClevel()][x][y - 2] = 303;
		}
	}
	if (w.getShield() != 40 && map[w.getClevel()][x][y + 1] == 303)
	{
		w.Lose_Hp(200);
		MessageBox(hwnd, _T("受到魔法攻击，生命值减少200！"), _T("提示"), MB_OK);
		if (map[w.getClevel()][x][y + 2] == 1)
		{
			map[w.getClevel()][x][y + 1] = 1;
			map[w.getClevel()][x][y + 2] = 303;
		}
	}
	if (w.getHp() <= 0)
	{
		Eventdead();
	}
}

TCHAR* trans(int num)
{
	_stprintf(str, _T("%d"), num);
	return str;
}

// end